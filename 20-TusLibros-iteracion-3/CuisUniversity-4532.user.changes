

----STARTUP---- (9 June 2021 00:21:16) as C:\Users\ezequ\Desktop\windows64\CuisUniversity-4532.image!



Object subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CarritoTest category: #TusLibros stamp: 'ET 6/9/2021 18:26:19'!
Object subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'ET 6/9/2021 18:27:43'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CarritoTest methodsFor: 'no messages' stamp: 'ET 6/9/2021 18:27:37'!
test01NewCartisEmpty

	|cart|
	
	cart := Cart new.
	
	self assert: cart isEmpty.! !

TestCase subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CarritoTest category: #TusLibros stamp: 'ET 6/9/2021 18:27:53'!
TestCase subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 18:27:55'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:28:01'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:28:08' prior: 51031032!
isEmpty
	^true.! !

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 18:28:10'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 18:28:10'!
PASSED!

!classDefinition: #Book category: #TusLibros stamp: 'ET 6/9/2021 18:31:33'!
Object subclass: #Book
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:31:29'!
test02NewCartIsAddedABookAndItsListHasThatBook

	|cart book|
	
	cart := Cart new.
	
	book := Book new.
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: cart hasBook: book.! !
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:31:40' prior: 51031051!
test02NewCartIsAddedABookAndItsListHasThatBook

	|cart book|
	
	cart := Cart new.
	
	book := Book new.
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: (cart hasBook: book).! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:31:42'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:31:48'!
addBook: aBook 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:32:12' prior: 51031072!
addBook: aBook ! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:32:14'!
FAILURE!

!classDefinition: #Cart category: #TusLibros stamp: 'ET 6/9/2021 18:33:31'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:33:29' prior: 51031077!
addBook: aBook 

	books ifNotNil: [books add: aBook].! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:33:32'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:33:50' prior: 51031091!
addBook: aBook 

	books ifNotNil: [books := OrderedCollection with: aBook].! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:33:53'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:34:45' prior: 51031036!
isEmpty
	^books isEmpty.! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:34:49'!
ERROR!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:35:33'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:35:43' prior: 51031099!
addBook: aBook 

	books ifNotNil: [books := OrderedCollection with: aBook].
	self halt.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:35:56' prior: 51031119!
addBook: aBook 

	books ifNil: [books := OrderedCollection with: aBook].
	self halt.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:36:03' prior: 51031125!
addBook: aBook 

	books ifNil: [books := OrderedCollection with: aBook].! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:36:04'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:36:11'!
hasBook: aBook 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:36:27' prior: 51031140!
hasBook: aBook 
	^books includes: aBook.! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:36:29'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 18:36:29'!
ERROR!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:36:29'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 18:36:29'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:37:04' prior: 51031108!
isEmpty
	^books ifNil: [books := OrderedCollection new.
		books isEmpty.]! !

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 18:37:06'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:37:10'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:37:41' prior: 51031162!
isEmpty
	books ifNil: [books := OrderedCollection new.
		^books isEmpty.]! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:37:43'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:38:03' prior: 51031174!
isEmpty
	books ifNil: [books := OrderedCollection new.]
	
	^books isEmpty.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:38:05' prior: 51031183!
isEmpty
	books ifNil: [books := OrderedCollection new.].
	
	^books isEmpty.! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:38:06'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 18:38:06'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:38:06'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:39:12' overrides: 16896425!
initialize

	books := OrderedCollection new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:39:23' prior: 51031131!
addBook: aBook 

	books add: aBook.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:39:35' prior: 51031189!
isEmpty
	
	^books isEmpty.! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:39:43'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 18:39:43'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:39:43'!
PASSED!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:43:32'!
test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks

	|cart book1 book2|
	
	cart := Cart new.
	
	book1 := Book new.
	
	book2 := Book new.
	
	cart addBook: book1;
		addBook: book2.
	
	self deny: cart bookList size equals: 2.
	self assert: (cart bookList includes: book1).
	self assert: (cart bookList includes: book2).! !

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 18:43:34'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:43:45'!
bookList
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:43:53' prior: 51031243!
bookList
	^books copy.! !

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 18:43:54'!
ERROR!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:44:07' prior: 51031226!
test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks

	|cart book1 book2|
	
	cart := Cart new.
	
	book1 := Book new.
	
	book2 := Book new.
	
	cart addBook: book1;
		addBook: book2.
	
	self assert: cart bookList size equals: 2.
	self assert: (cart bookList includes: book1).
	self assert: (cart bookList includes: book2).! !

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 18:44:13'!
ERROR!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 18:44:17'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 18:44:17'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:44:17'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 18:44:17'!
PASSED!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:46:19'!
test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks

	|cart book |
	
	cart := Cart new.
	
	book := Book new.
	
	cart addBook: book;
		addBook: book.
	
	self assert: cart bookList size equals: 2.
	self assert: (cart bookList first) equals: book.
	self assert: (cart bookList second) equals: book.! !

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 18:46:21'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 18:46:21'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 18:46:21'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 18:46:21'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 18:46:21'!
PASSED!

!classDefinition: #BookCatalog category: #TusLibros stamp: 'ET 6/9/2021 18:54:51'!
Object subclass: #BookCatalog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:54:47'!
test05

	|cart book catalog|
	
	catalog := BookCatalog new.
	
	cart := Cart new.
	
	book := Book new.
	
	cart addBook: book;
		addBook: book.
	
	self assert: cart bookList size equals: 2.
	self assert: (cart bookList first) equals: book.
	self assert: (cart bookList second) equals: book.! !
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:55:24' prior: 51031323!
test05

	|cart book catalog|
	
	catalog := BookCatalog new.
	
	cart := Cart xxxx: catalog.
	
	book := Book new.
	
	cart addBook: book;
		addBook: book.
	
	self assert: cart bookList size equals: 2.
	self assert: (cart bookList first) equals: book.
	self assert: (cart bookList second) equals: book.! !
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:55:43' prior: 51031336!
test05

	|cart book catalog|
	
	catalog := BookCatalog new.
	
	cart := Cart xxxx: catalog.
	
	book := Book new.
	
	
! !
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:56:50' prior: 51031349!
test05

	|cart book catalog|
	
	catalog := BookCatalog new.
	
	cart := Cart xxxx: catalog.
	
	book := Book new.
	
	self should:[cart addBook: book]
	raise: Error 
	withExceptionDo: [ :anError | self assert: anError messageText equals: (Cart canNotAddBookThatIsNotInTheCatalog) ].
	
	
! !

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 18:56:54'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'ET 6/9/2021 18:57:01'!
xxxx: aBookCatalog 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeXxxx: aBookCatalog ! !
!Cart class methodsFor: 'instance creation' stamp: 'ET 6/9/2021 18:57:16' prior: 51031370!
xxxx: aBookCatalog 
	
	^self new initializeXxxx: aBookCatalog.! !

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 18:57:19'!
ERROR!

!classDefinition: #Cart category: #TusLibros stamp: 'ET 6/9/2021 18:57:26'!
Object subclass: #Cart
	instanceVariableNames: 'books bookCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'ET 6/9/2021 18:57:26'!
initializeXxxx: aBookCatalog 
	self shouldBeImplemented.
	bookCatalog := aBookCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'ET 6/9/2021 18:57:40' prior: 51031391!
initializeXxxx: aBookCatalog 

	bookCatalog := aBookCatalog.
	books := OrderedCollection new.! !

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 18:57:43'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:58:19' prior: 51031209!
addBook: aBook 

	self assertBookIsInCatalog: aBook.

	books add: aBook.! !

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 18:58:22'!
ERROR!
!Cart class methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:58:41'!
canNotAddBookThatIsNotInTheCatalog
	self shouldBeImplemented.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 18:59:07' prior: 51031412!
canNotAddBookThatIsNotInTheCatalog
	
	^'No se puede agregar un libro que no est� en el cat�logo de compras'.! !

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 18:59:09'!
FAILURE!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 18:59:22'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:02:21'!
assertBookIsInCatalog: aBook

	bookCatalog hasBook: aBook ifFalse: [self error: self class canNotAddBookThatIsNotInTheCatalog ].! !

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:02:31'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:02:31'!
ERROR!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:02:31'!
ERROR!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:02:31'!
ERROR!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:02:31'!
FAILURE!
!BookCatalog methodsFor: 'no messages' stamp: 'ET 6/9/2021 19:03:05'!
hasBook: aBook

	^true! !

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:03:08'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:03:08'!
ERROR!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:03:08'!
ERROR!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:03:08'!
ERROR!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:03:08'!
FAILURE!

!classDefinition: #BookCatalog category: #TusLibros stamp: 'ET 6/9/2021 19:04:00'!
Object subclass: #BookCatalog
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!BookCatalog methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:03:59'!
addBook: aBook

	books add: aBook.! !
!BookCatalog methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:04:12' overrides: 16896425!
initialize

	books := OrderedCollection new.! !
!BookCatalog methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:04:20' prior: 51031483 overrides: 16896425!
initialize

	books := Set new.! !

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:04:28'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:04:28'!
ERROR!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:04:28'!
ERROR!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:04:28'!
ERROR!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:04:28'!
FAILURE!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:05:30' prior: 51031060!
test02NewCartIsAddedABookAndItsListHasThatBook

	|cart book catalog|
	
	catalog := BookCatalog new.
	book := Book new.
	
	catalog addBook: book.
	
	cart := Cart xxxx: catalog.
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: (cart hasBook: book).! !

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:05:32'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:05:32'!
ERROR!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:05:32'!
ERROR!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:05:32'!
ERROR!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:05:32'!
FAILURE!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:05:39'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:05:55' prior: 51031428!
assertBookIsInCatalog: aBook

	(bookCatalog hasBook: aBook) ifFalse: [self error: self class canNotAddBookThatIsNotInTheCatalog ].! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:05:57'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:05:59'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:05:59'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:05:59'!
ERROR!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:05:59'!
ERROR!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:05:59'!
FAILURE!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:06:34' prior: 51031255!
test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks

	|cart book1 book2 catalog|
	
	catalog := BookCatalog new.
	book1 := Book new.
	book2 := Book new.
	
	catalog addBook: book1.
	catalog addBook: book2.
	
	cart := Cart xxxx: catalog.
	
	cart addBook: book1;
		addBook: book2.
	
	self assert: cart bookList size equals: 2.
	self assert: (cart bookList includes: book1).
	self assert: (cart bookList includes: book2).! !

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:06:35'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:06:35'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:06:35'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:06:35'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:06:35'!
ERROR!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:06:35'!
FAILURE!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:07:59' prior: 51031286!
test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks

	|cart book catalog |
	
	catalog := BookCatalog new.
	book := Book new.
	catalog addBook: book.
	cart := Cart xxxx: catalog.
	
	cart addBook: book;
		addBook: book.
	
	self assert: cart bookList size equals: 2.
	self assert: (cart bookList first) equals: book.
	self assert: (cart bookList second) equals: book.! !

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:08:02'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:08:02'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:08:02'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:08:02'!
PASSED!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:08:02'!
FAILURE!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:08:02'!
FAILURE!
!BookCatalog methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:08:51' prior: 51031451!
hasBook: aBook

	^books includes: aBook.! !

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:08:53'!
PASSED!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:08:57'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:08:57'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:08:57'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:08:57'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:08:57'!
PASSED!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:08:57'!
PASSED!

TestCase subclass: #CarritoTest
	instanceVariableNames: 'catalog cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CarritoTest
	instanceVariableNames: 'catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CarritoTest category: #TusLibros stamp: 'ET 6/9/2021 19:14:27'!
TestCase subclass: #CarritoTest
	instanceVariableNames: 'catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:15:34' prior: 51031510!
test02NewCartIsAddedABookAndItsListHasThatBook

	|cart book catalog|
	
	catalog := BookCatalog new.
	book := Book new.
	
	catalog addBook: book.
	
	cart := self emptyCartWithEmptyCatalog.
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: (cart hasBook: book).! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:15:38'!
ERROR!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:15:45'!
emptyCartWithEmptyCatalog
	self shouldBeImplemented.! !
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:16:24' prior: 51031695!
emptyCartWithEmptyCatalog
	
	catalogue := BookCatalog new.
	
	^Cart xxxx: catalogue.! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:16:27'!
ERROR!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:16:53' prior: 51031680!
test02NewCartIsAddedABookAndItsListHasThatBook

	|cart book |
	
	book := Book new.
	
	cart := self emptyCartWithEmptyCatalog.
	
	catalogue addBook: book.
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: (cart hasBook: book).! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:16:54'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:16:54'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:16:54'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:16:54'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:16:54'!
PASSED!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:16:54'!
PASSED!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:17:46' prior: 51031710!
test02NewCartIsAddedABookAndItsListHasThatBook

	|cart book |
	
	book := Book new.
	
	cart := self emptyCartWithCatalogue.
	
	catalogue addBook: book.
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: (cart hasBook: book).! !
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:18:04' prior: 51031741!
test02NewCartIsAddedABookAndItsListHasThatBook

	|cart book |
	
	book := Book new.
	
	cart := self emptyCart.
	
	catalogue addBook: book.
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: (cart hasBook: book).! !
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:19:06' overrides: 16927572!
setUp

	catalogue := BookCatalog new.! !
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:19:16' prior: 51031700!
emptyCartWithEmptyCatalog
	
	^Cart xxxx: catalogue.! !
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:19:25'!
emptyCart
	
	^Cart xxxx: catalogue.! !

!methodRemoval: CarritoTest #emptyCartWithEmptyCatalog stamp: 'ET 6/9/2021 19:19:25'!
emptyCartWithEmptyCatalog
	
	^Cart xxxx: catalogue.!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:19:31'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:19:31'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:19:31'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:19:31'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:19:31'!
PASSED!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:19:31'!
PASSED!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:19:39' prior: 51031013!
test01NewCartisEmpty

	|cart|
	
	cart := self emptyCart.
	
	self assert: cart isEmpty.! !

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:20:08'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:20:08'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:20:08'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:20:08'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:20:08'!
PASSED!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:20:08'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:20:25'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:20:25'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:20:25'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:20:25'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:20:25'!
PASSED!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:20:25'!
PASSED!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:20:55' prior: 51031752!
test02NewCartIsAddedABookAndItsListHasThatBook

	|cart book |
	
	book := Book new.
	catalogue addBook: book.
	cart := self emptyCart.
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: (cart hasBook: book).! !

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:21:04'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:21:04'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:21:04'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:21:04'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:21:04'!
PASSED!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:21:04'!
PASSED!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:22:03' prior: 51031568!
test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks

	|cart book1 book2 |
	
	book1 := Book new.
	book2 := Book new.
	catalogue 
		addBook: book1;
		addBook: book2.

	cart := self emptyCart.
	cart addBook: book1;
		addBook: book2.
	
	self assert: cart bookList size equals: 2.
	self assert: (cart bookList includes: book1).
	self assert: (cart bookList includes: book2).! !

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:22:07'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:22:07'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:22:07'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:22:07'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:22:07'!
PASSED!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:22:07'!
PASSED!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:22:35' prior: 51031605!
test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks

	|cart book |
	
	book := Book new.
	catalogue addBook: book.
	cart := self emptyCart.
	
	cart addBook: book;
		addBook: book.
	
	self assert: cart bookList size equals: 2.
	self assert: (cart bookList first) equals: book.
	self assert: (cart bookList second) equals: book.! !

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:22:37'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:22:37'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:22:37'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:22:37'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:22:37'!
PASSED!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:22:37'!
PASSED!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:22:58' prior: 51031356!
test05

	|cart book |
	
	cart := self emptyCart.
	book := Book new.
	
	self should:[cart addBook: book]
	raise: Error 
	withExceptionDo: [ :anError | self assert: anError messageText equals: (Cart canNotAddBookThatIsNotInTheCatalog) ].
	
	
! !

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:23:00'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:23:00'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:23:00'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:23:00'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:23:00'!
PASSED!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:23:00'!
PASSED!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:26:02' prior: 51031910!
test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks

	|cart book |
	
	book := Book new.
	catalogue addBook: book.
	cart := self emptyCart.
	
	cart addBook: book;
		addBook: book.
	
	self assert: cart bookList size equals: 2.
	self assert: (cart bookList occurrencesOf: book) equals: 2.! !

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:26:03'!
PASSED!

!testRun: #CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:26:03'!
PASSED!

!testRun: #CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:26:03'!
PASSED!

!testRun: #CarritoTest #test03NewCartIsAddedTwoDifferentBooksAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:26:03'!
PASSED!

!testRun: #CarritoTest #test04NewCartIsAddedTheSameBookTwiceAndItsListHasThoseBooks stamp: 'ET 6/9/2021 19:26:03'!
PASSED!

!testRun: #CarritoTest #test05 stamp: 'ET 6/9/2021 19:26:03'!
PASSED!
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:33:05'!
test05NewCartCannotAddBookThatIsNotInTheCatalog

	|cart book |
	
	cart := self emptyCart.
	book := Book new.
	
	self should:[cart addBook: book]
	raise: Error 
	withExceptionDo: [ :anError | self assert: anError messageText equals: (Cart canNotAddBookThatIsNotInTheCatalog) ].
	
	
! !

!methodRemoval: CarritoTest #test05 stamp: 'ET 6/9/2021 19:33:05'!
test05

	|cart book |
	
	cart := self emptyCart.
	book := Book new.
	
	self should:[cart addBook: book]
	raise: Error 
	withExceptionDo: [ :anError | self assert: anError messageText equals: (Cart canNotAddBookThatIsNotInTheCatalog) ].
	
	
!
!Cart methodsFor: 'initialization' stamp: 'ET 6/9/2021 19:34:15'!
initializeWithCatalog: aBookCatalog 

	bookCatalog := aBookCatalog.
	books := OrderedCollection new.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:34:15' prior: 51031378!
xxxx: aBookCatalog 
	
	^self new initializeWithCatalog: aBookCatalog.! !

!methodRemoval: Cart #initializeXxxx: stamp: 'ET 6/9/2021 19:34:15'!
initializeXxxx: aBookCatalog 

	bookCatalog := aBookCatalog.
	books := OrderedCollection new.!
!Cart class methodsFor: 'instance creation' stamp: 'ET 6/9/2021 19:34:45'!
withCatalog: aBookCatalog 
	
	^self new initializeWithCatalog: aBookCatalog.! !
!CarritoTest methodsFor: 'as yet unclassified' stamp: 'ET 6/9/2021 19:34:45' prior: 51031773!
emptyCart
	
	^Cart withCatalog: catalogue.! !

!methodRemoval: Cart class #xxxx: stamp: 'ET 6/9/2021 19:34:45'!
xxxx: aBookCatalog 
	
	^self new initializeWithCatalog: aBookCatalog.!

!methodRemoval: Cart #initialize stamp: 'ET 6/9/2021 19:35:51'!
initialize

	books := OrderedCollection new.!
!CarritoTest methodsFor: 'tests' stamp: 'ET 6/9/2021 19:37:57'!
test01NewCartIsEmpty

	|cart|
	
	cart := self emptyCart.
	
	self assert: cart isEmpty.! !

!methodRemoval: CarritoTest #test01NewCartisEmpty stamp: 'ET 6/9/2021 19:37:57'!
test01NewCartisEmpty

	|cart|
	
	cart := self emptyCart.
	
	self assert: cart isEmpty.!
!CarritoTest methodsFor: 'tests' stamp: 'ET 6/9/2021 19:38:21'!
test02NewCartIsAddedABookAndItHasThatBook

	|cart book |
	
	book := Book new.
	catalogue addBook: book.
	cart := self emptyCart.
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: (cart hasBook: book).! !

!methodRemoval: CarritoTest #test02NewCartIsAddedABookAndItsListHasThatBook stamp: 'ET 6/9/2021 19:38:21'!
test02NewCartIsAddedABookAndItsListHasThatBook

	|cart book |
	
	book := Book new.
	catalogue addBook: book.
	cart := self emptyCart.
	
	cart addBook: book.
	
	self deny: cart isEmpty.
	self assert: (cart hasBook: book).!

----SNAPSHOT----(9 June 2021 19:42:05) CuisUniversity-4532.image priorSource: 22378975!

----STARTUP---- (10 June 2021 17:24:02) as C:\Users\ezequ\Desktop\windows64\CuisUniversity-4532.image!


!classRemoval: #Cart stamp: 'ET 6/10/2021 18:22:26'!
Object subclass: #Cart
	instanceVariableNames: 'books bookCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #BookCatalog stamp: 'ET 6/10/2021 18:22:26'!
Object subclass: #BookCatalog
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Book stamp: 'ET 6/10/2021 18:22:26'!
Object subclass: #Book
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CarritoTest stamp: 'ET 6/10/2021 18:22:27'!
TestCase subclass: #CarritoTest
	instanceVariableNames: 'catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\ezequ\Desktop\windows64\TusLibros.st----!

----SNAPSHOT----(10 June 2021 18:22:47) CuisUniversity-4532.image priorSource: 22414116!
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(OrderedCollection
		cover: (71 to: 87)
		declaredAt: (71 to: 87)) new ] valueCoveringAll:
		{89 to: 91})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ET 6/10/2021 19:31:19'!
PASSED!
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includes:
		(anItem
			cover: (48 to: 53)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 46}) ifFalse: [
		[
		(self coverAll:
			{67 to: 70}) error:
			([
			(self coverAll:
				{79 to: 82}) invalidItemErrorMessage ] valueCoveringAll:
				{84 to: 106}) ] valueCoveringAll:
			{72 to: 77} ]] valueCoveringAll:
		{56 to: 63}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ET 6/10/2021 19:31:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ET 6/10/2021 19:31:19'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ET 6/10/2021 19:31:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ET 6/10/2021 19:31:19'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ET 6/10/2021 19:31:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ET 6/10/2021 19:31:19'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ET 6/10/2021 19:31:19'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'ET 6/10/2021 19:39:46'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'ET 6/10/2021 19:40:58'!
test01

	|cart catalog|
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ET 6/10/2021 19:45:25'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 19:45:18' prior: 51032447!
test01

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 19:46:31' prior: 51032460!
test01

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart]
	 raise: Error
	 withExceptionDo: [].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 19:47:35' prior: 51032470!
test01

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CanNotCheckoutEmptyCart. ]! !

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 19:47:53'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'ET 6/10/2021 19:48:01'!
with: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aDictionary ! !
!Cashier class methodsFor: 'instance creation' stamp: 'ET 6/10/2021 19:48:18' prior: 51032498!
with: aPriceList 
	^self new initializeWith: aPriceList! !

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 19:48:20'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ET 6/10/2021 19:48:29'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 19:48:29'!
initializeWith: aPriceList 
	self shouldBeImplemented.
	priceList := aPriceList.! !
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 19:48:32' prior: 51032519!
initializeWith: aPriceList 

	priceList := aPriceList.! !

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 19:48:34'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 19:48:52'!
CanNotCheckoutEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 19:49:19' prior: 51032532!
CanNotCheckoutEmptyCart
	^'The cart is empty'.! !

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 19:49:20'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 19:50:50'!
checkout: aCart

	self error: self class CanNotCheckoutEmptyCart.! !

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 19:50:56'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 19:50:56'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 19:53:10'!
test02

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	
	cart add: 'book'.
	catalog add: 'book'.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. ]! !

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 19:53:13'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 19:53:24' prior: 51032554!
test02

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. ]! !

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 19:53:31'!
ERROR!

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 19:53:37'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 19:53:46'!
AnItemIsNotInThePriceList
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 19:54:00' prior: 51032592!
AnItemIsNotInThePriceList
	^'An item in the cart is not in the price list'.! !

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 19:54:03'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 19:55:09' prior: 51032544!
checkout: aCart

	aCart isEmpty ifTrue: [	self error: self class CanNotCheckoutEmptyCart] 
	ifFalse: [self error: self class AnItemIsNotInThePriceList ].! !

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 19:55:13'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 19:55:13'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 19:55:13'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 19:58:09'!
test03

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 1 equals:  (cashier checkout: cart).! !

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 19:58:13'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 20:08:33' prior: 51032605!
checkout: aCart
	|totalPrice|
	aCart isEmpty ifTrue: [	self error: self class CanNotCheckoutEmptyCart].
	totalPrice := 0.
	[aCart do: [:anElement | totalPrice := priceList includesKey: anElement + totalPrice]]
	on: Error
	do: [:anError | 
		self halt.
		self error: self class AnItemIsNotInThePriceList ].! !
!Cart methodsFor: 'adding' stamp: 'ET 6/10/2021 20:09:25'!
do: aBlockClosure

	items do: aBlockClosure.! !
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 20:10:10' prior: 51032636!
checkout: aCart
	|totalPrice|
	aCart isEmpty ifTrue: [	self error: self class CanNotCheckoutEmptyCart].
	totalPrice := 0.
	[aCart do: [:anElement | totalPrice := totalPrice + priceList includesKey: anElement ]]
	on: Error
	do: [:anError | 
		self halt.
		self error: self class AnItemIsNotInThePriceList ].! !

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:10:12'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:10:19'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 20:10:57' prior: 51032653!
checkout: aCart
	|totalPrice|
	aCart isEmpty ifTrue: [	self error: self class CanNotCheckoutEmptyCart].
	totalPrice := 0.
	[aCart do: [:anElement | totalPrice := totalPrice + priceList includesKey: anElement ]]
	on: Error
	do: [:anError | 
		self halt.
		self error: self class AnItemIsNotInThePriceList ].
	
	^totalPrice.! !

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:11:00'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:11:34' prior: 51032572!
test02

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. ]! !

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 20:11:35'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 20:13:49' prior: 51032670!
checkout: aCart
	|totalPrice|
	aCart isEmpty ifTrue: [	self error: self class CanNotCheckoutEmptyCart].
	totalPrice := 0.
	aCart do: [:anElement | totalPrice := totalPrice + priceList at: anElement ifAbsent: [self error: self class AnItemIsNotInThePriceList ].].
	
	^totalPrice.! !

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 20:13:51'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 20:13:51'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 20:13:51'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:13:51'!
PASSED!
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 20:14:38'!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [	self error: self class CanNotCheckoutEmptyCart]! !
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 20:14:38' prior: 51032704!
checkout: aCart
	|totalPrice|
	self assertCartIsNotEmpty: aCart.
	totalPrice := 0.
	aCart do: [:anElement | totalPrice := totalPrice + priceList at: anElement ifAbsent: [self error: self class AnItemIsNotInThePriceList ].].
	
	^totalPrice.! !
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 20:14:57'!
itemNotInPriceListError

	^ self error: self class AnItemIsNotInThePriceList! !
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 20:14:57' prior: 51032731!
checkout: aCart
	|totalPrice|
	self assertCartIsNotEmpty: aCart.
	totalPrice := 0.
	aCart do: [:anElement | totalPrice := totalPrice + priceList at: anElement ifAbsent: [self itemNotInPriceListError ].].
	
	^totalPrice.! !
!Cashier methodsFor: 'initialization' stamp: 'ET 6/10/2021 20:15:01' prior: 51032747!
checkout: aCart
	|totalPrice|
	self assertCartIsNotEmpty: aCart.
	totalPrice := 0.
	aCart do: [:anElement | totalPrice := totalPrice + priceList at: anElement ifAbsent: [self itemNotInPriceListError].].
	
	^totalPrice.! !

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:15:04'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 20:15:04'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 20:15:04'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:15:04'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:15:26' prior: 51032620!
test03

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 1 equals:  (cashier checkout: cart).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:17:04' prior: 51032776!
test03

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 2 equals:  (cashier checkout: cart).! !

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:17:05'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 20:17:05'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 20:17:05'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:17:05'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:15:26' prior: 51032790!
test03

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 1 equals:  (cashier checkout: cart).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:17:20' prior: 51032813!
test03

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 1 equals:  (cashier checkout: cart).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:17:22'!
test04

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 1 equals:  (cashier checkout: cart).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:17:29' prior: 51032840!
test04

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 2 equals:  (cashier checkout: cart).! !

!testRun: #CashierTest #test04 stamp: 'ET 6/10/2021 20:17:31'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 20:17:31'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 20:17:31'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:17:31'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ET 6/10/2021 20:17:31'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ET 6/10/2021 20:17:42'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 20:17:42'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 20:17:42'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:17:42'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ET 6/10/2021 20:17:42'!
PASSED!

2021 / 01!

2021 \ 01!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ET 6/10/2021 20:29:28'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:29:22'!
test05

	|cart catalog cashier priceList creditCard |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	creditCard := CreditCard owner: 'owner' number: '1234567891011121' expiration: GregorianMonthOfYear current next.

	
	self assert: 2 equals:  (cashier checkout: cart withCreditCard: creditCard).! !

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:31:08'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'ET 6/10/2021 20:31:15'!
owner: aString number: aString2 expiration: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOwner: aString number: aString2 expiration: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'ET 6/10/2021 20:32:05' prior: 51032919!
owner: anOwnerString number: aCreditCardNumber expiration: aGregorianMonthOfYear 
	
	^self new initializeOwner: anOwnerString number: aCreditCardNumber expiration: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'ET 6/10/2021 20:32:45' prior: 51032930!
owner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear 
	self assertCreditCardNumberIsValid: aCreditCardNumberString.
	^self new initializeOwner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear ! !

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:32:50'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:32:58'!
assertCreditCardNumberIsValid: aString 
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:33:37' prior: 51032953!
assertCreditCardNumberIsValid: aString 
	
	aString size = 16 ifFalse: [self error: self creditCardIsInvalid]! !

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:33:41'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ET 6/10/2021 20:33:52'!
Object subclass: #CreditCard
	instanceVariableNames: 'ownerString'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ET 6/10/2021 20:33:53'!
Object subclass: #CreditCard
	instanceVariableNames: 'ownerString creditCardNumberString'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ET 6/10/2021 20:33:53'!
Object subclass: #CreditCard
	instanceVariableNames: 'ownerString creditCardNumberString gregorianMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'ET 6/10/2021 20:33:53'!
initializeOwner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear 
	self shouldBeImplemented.
	ownerString := anOwnerString.
	creditCardNumberString := aCreditCardNumberString.
	gregorianMonthOfYear := aGregorianMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'ET 6/10/2021 20:34:00' prior: 51032990!
initializeOwner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear 

	ownerString := anOwnerString.
	creditCardNumberString := aCreditCardNumberString.
	gregorianMonthOfYear := aGregorianMonthOfYear.! !

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:34:02'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:34:09'!
checkout: aCart withCreditCard: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:34:25' prior: 51033013!
checkout: aCart withCreditCard: aCreditCard 
	^1.! !

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:34:27'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:34:36' prior: 51032898!
test05

	|cart catalog cashier priceList creditCard |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	creditCard := CreditCard owner: 'owner' number: '1234567891011121' expiration: GregorianMonthOfYear current next.

	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: creditCard).! !

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:34:38'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 20:34:38'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 20:34:38'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:34:38'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ET 6/10/2021 20:34:38'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:34:38'!
PASSED!

!methodRemoval: Cashier #checkout:withCreditCard: stamp: 'ET 6/10/2021 20:37:02'!
checkout: aCart withCreditCard: aCreditCard 
	^1.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:38:13'!
checkout: aCart withCreditCard: aCreditCard 
	|totalPrice|
	self assertCartIsNotEmpty: aCart.
	totalPrice := 0.
	aCart do: [:anElement | totalPrice := totalPrice + priceList at: anElement ifAbsent: [self itemNotInPriceListError].].
	
	^totalPrice.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:38:13' prior: 51032854!
test04

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 2 equals:  (cashier checkout: cart withCreditCard: withCreditCard).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:38:13' prior: 51032827!
test03

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: withCreditCard).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:38:13' prior: 51032482!
test01

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart withCreditCard: withCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CanNotCheckoutEmptyCart. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:38:13' prior: 51032686!
test02

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart withCreditCard: withCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. ]! !

!methodRemoval: Cashier #checkout: stamp: 'ET 6/10/2021 20:38:13'!
checkout: aCart
	|totalPrice|
	self assertCartIsNotEmpty: aCart.
	totalPrice := 0.
	aCart do: [:anElement | totalPrice := totalPrice + priceList at: anElement ifAbsent: [self itemNotInPriceListError].].
	
	^totalPrice.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:38:58'!
validCreditCard

	^ CreditCard owner: 'owner' number: '1234567891011121' expiration: GregorianMonthOfYear current next! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:38:58' prior: 51033026!
test05

	|cart catalog cashier priceList creditCard |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	creditCard := self validCreditCard.

	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: creditCard).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:39:17' prior: 51033073!
test04

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 2 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:39:23' prior: 51033088!
test03

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:39:30' prior: 51033119!
test02

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:39:31' prior: 51033197!
test02

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:39:38' prior: 51033103!
test01

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CanNotCheckoutEmptyCart. ]! !

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 20:39:39'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 20:39:39'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 20:39:39'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:39:39'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ET 6/10/2021 20:39:39'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:39:39'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:40:39'!
invalidCreditCard

	^ CreditCard owner: 'owner' number: '1234567891011121' expiration: GregorianMonthOfYear current previous.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:40:54'!
expiredCreditCard

	^ CreditCard owner: 'owner' number: '1234567891011121' expiration: GregorianMonthOfYear current previous.! !

!methodRemoval: CashierTest #invalidCreditCard stamp: 'ET 6/10/2021 20:40:59'!
invalidCreditCard

	^ CreditCard owner: 'owner' number: '1234567891011121' expiration: GregorianMonthOfYear current previous.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:41:26' prior: 51033151!
test05

	|cart catalog cashier priceList creditCard |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	creditCard := self validCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [] .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:42:06' prior: 51033281!
test05

	|cart catalog cashier priceList creditCard |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	creditCard := self validCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError ]	.
		
		
		! !

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:42:12'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:42:40' prior: 51033298!
test05

	|cart catalog cashier priceList creditCard |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	creditCard := self expiredCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError ]	.
		
		
		! !

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:42:46'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:43:17' prior: 51033062!
checkout: aCart withCreditCard: aCreditCard 
	|totalPrice|
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsValid: aCreditCard.
	totalPrice := 0.
	aCart do: [:anElement | totalPrice := totalPrice + priceList at: anElement ifAbsent: [self itemNotInPriceListError].].
	
	^totalPrice.! !

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:43:26'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:43:33'!
ExpiredCreditCardError
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:43:48' prior: 51033356!
ExpiredCreditCardError
	^'The credit card is expired'.! !

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:43:49'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:45:42'!
assertCreditCardIsValid: aCreditCard
	
	aCreditCard expirationDate < GregorianMonthOfYear current ifTrue: [self error: self class ExpiredCreditCardError].! !
!CreditCard methodsFor: 'initialization' stamp: 'ET 6/10/2021 20:46:08'!
expirationDate

	^gregorianMonthOfYear! !

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:46:14'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ET 6/10/2021 20:46:14'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ET 6/10/2021 20:46:14'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ET 6/10/2021 20:46:14'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ET 6/10/2021 20:46:14'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'ET 6/10/2021 20:46:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:49:28' prior: 51033320!
test05

	|cart catalog cashier priceList creditCard |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	creditCard := self expiredCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError ]	.
		
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:50:24'!
test01CanNotCheckoutEmptyCart

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CanNotCheckoutEmptyCart. ]! !

!methodRemoval: CashierTest #test01 stamp: 'ET 6/10/2021 20:50:24'!
test01

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CanNotCheckoutEmptyCart. ]!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:51:03'!
test02CanNotCheckoutCartWithNonPricedItem

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. ]! !

!methodRemoval: CashierTest #test02 stamp: 'ET 6/10/2021 20:51:03'!
test02

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	priceList := Dictionary new.
	
	cashier := Cashier with: priceList.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. ]!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:51:53'!
test03CheckoutCartWithOneItemReturnsThePriceOfThatItem

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).! !

!methodRemoval: CashierTest #test03 stamp: 'ET 6/10/2021 20:51:53'!
test03

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:52:25'!
test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 2 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).! !

!methodRemoval: CashierTest #test04 stamp: 'ET 6/10/2021 20:52:25'!
test04

	|cart catalog cashier priceList |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	
	self assert: 2 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/10/2021 20:52:47'!
test05CanNotCheckoutWithExpiratedCreditCard

	|cart catalog cashier priceList creditCard |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	creditCard := self expiredCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError ]	.
		
		
		! !

!methodRemoval: CashierTest #test05 stamp: 'ET 6/10/2021 20:52:47'!
test05

	|cart catalog cashier priceList creditCard |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	creditCard := self expiredCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError ]	.
		
		
		!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/14/2021 17:06:54'!
test05CanNotCheckoutWithExpiredCreditCard

	|cart catalog cashier priceList creditCard |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	creditCard := self expiredCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError ]	.
		
		
		! !

!methodRemoval: CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/14/2021 17:06:54'!
test05CanNotCheckoutWithExpiratedCreditCard

	|cart catalog cashier priceList creditCard |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	cashier := Cashier with: priceList.
	
	creditCard := self expiredCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError ]	.
		
		
		!

014!

014!

----STARTUP---- (14 June 2021 18:38:42) as /home/julian/facu/ingenieria1/ambientesCuis/TusLibros1/CuisUniversity-4532.image!


----End fileIn of /home/julian/facu/ingenieria1/ejsIS1/20-TusLibros/TusLibros.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JA 6/14/2021 18:41:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JA 6/14/2021 18:41:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JA 6/14/2021 18:41:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JA 6/14/2021 18:41:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JA 6/14/2021 18:41:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JA 6/14/2021 18:41:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JA 6/14/2021 18:41:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JA 6/14/2021 18:41:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:41:24'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 18:41:24'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 18:41:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 18:41:24'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 18:41:24'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 18:44:57' prior: 50859653!
test01CanNotCheckoutEmptyCart

	|cart catalog cashier priceList aSalesBook |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CanNotCheckoutEmptyCart. 
			self assert: aSalesBook isEmpty.]! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:45:05'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'JA 6/14/2021 18:45:25'!
with: aDictionary registerSalesOn: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aDictionary registerSalesOn: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'JA 6/14/2021 18:46:32' prior: 50860025!
with: aPriceList registerSalesOn: aSalesBook 
	
	^self new initializeWith: aPriceList registerSalesOn: aSalesBook! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:46:37'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'JA 6/14/2021 18:46:54'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'JA 6/14/2021 18:46:54'!
initializeWith: aPriceList registerSalesOn: aSalesBook 
	self shouldBeImplemented.
	priceList := aPriceList.
	salesBook := aSalesBook.! !
!Cashier methodsFor: 'initialization' stamp: 'JA 6/14/2021 18:47:05' prior: 50860052!
initializeWith: aPriceList registerSalesOn: aSalesBook 	
	priceList := aPriceList.
	salesBook := aSalesBook.! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:47:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:47:06'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 18:47:06'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 18:47:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 18:47:06'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 18:47:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:47:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:47:29'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 18:47:29'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 18:47:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 18:47:29'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 18:47:29'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 18:50:22' prior: 50859669!
test02CanNotCheckoutCartWithNonPricedItem

	|cart catalog cashier priceList aSalesBook |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. 
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 18:50:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:50:25'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 18:50:25'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 18:50:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 18:50:25'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 18:50:25'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 18:52:29' prior: 50859687!
test03CheckoutCartWithOneItemReturnsThePriceOfThatItem

	|cart catalog cashier priceList aSalesBook |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook.
	
	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: 1 equals: aSalesBook first.! !

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 18:52:32'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 18:53:33' prior: 50859857!
checkout: aCart withCreditCard: aCreditCard 
	|totalPrice|
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsValid: aCreditCard.
	totalPrice := 0.
	aCart do: [:anElement | totalPrice := totalPrice + priceList at: anElement ifAbsent: [self itemNotInPriceListError].].
	salesBook add: totalPrice .
	^totalPrice.! !

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 18:53:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:53:34'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 18:53:34'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 18:53:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 18:53:34'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 18:53:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 18:53:34'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 18:54:11'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 18:55:18' prior: 50859703!
test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems

	|cart catalog cashier priceList aSalesBook |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook.
		
	self assert: 2 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: 2 equals: aSalesBook first.! !

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 18:55:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:55:22'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 18:55:22'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 18:55:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 18:55:22'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 18:55:22'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 18:55:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:55:33'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 18:55:33'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 18:55:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 18:55:33'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 18:55:33'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 18:56:06' prior: 50859720!
test05CanNotCheckoutWithExpiratedCreditCard

	|cart catalog cashier priceList creditCard aSalesBook |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook.
		
	creditCard := self expiredCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 18:56:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:56:09'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 18:56:09'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 18:56:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 18:56:09'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 18:56:09'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JA 6/14/2021 18:56:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JA 6/14/2021 18:56:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JA 6/14/2021 18:56:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JA 6/14/2021 18:56:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JA 6/14/2021 18:56:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JA 6/14/2021 18:56:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JA 6/14/2021 18:56:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JA 6/14/2021 18:56:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 18:56:15'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 18:56:15'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 18:56:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 18:56:15'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 18:56:15'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 18:58:19'!
test06

	|cart catalog cashier priceList creditCard aSalesBook |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook.
		
	creditCard := self expiredCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:01:39' prior: 50860371!
test06

	|cart catalog cashier priceList creditCard aSalesBook |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CreditCardWithotCreditError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:01:45'!
FAILURE!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'JA 6/14/2021 19:05:11'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:05:02' prior: 50860394!
test06

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CreditCardWithotCreditError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:05:19'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'JA 6/14/2021 19:05:29'!
with: aDictionary registerSalesOn: anOrderedCollection merchantProcessor: aMerchantProcessorSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aDictionary registerSalesOn: anOrderedCollection merchantProcessor: aMerchantProcessorSimulator ! !
!Cashier class methodsFor: 'instance creation' stamp: 'JA 6/14/2021 19:06:11' prior: 50860457!
with: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessorSimulator 
	^self new initializeWith: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessorSimulator ! !

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:06:12'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'JA 6/14/2021 19:06:22'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList salesBook merchantProcessorSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'JA 6/14/2021 19:06:22'!
initializeWith: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessorSimulator 
	self shouldBeImplemented.
	priceList := aPriceList.
	salesBook := aSalesBook.
	merchantProcessorSimulator := aMerchantProcessorSimulator.! !
!Cashier methodsFor: 'initialization' stamp: 'JA 6/14/2021 19:06:29' prior: 50860490!
initializeWith: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessorSimulator 
	
	priceList := aPriceList.
	salesBook := aSalesBook.
	merchantProcessorSimulator := aMerchantProcessorSimulator.! !

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:06:32'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:08:26' prior: 50860175!
checkout: aCart withCreditCard: aCreditCard 
	|totalPrice|
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsValid: aCreditCard.
	totalPrice := 0.
	aCart do: [:anElement | totalPrice := totalPrice + priceList at: anElement ifAbsent: [self itemNotInPriceListError].].
	merchantProcessorSimulator charge: totalPrice  on: aCreditCard .
	salesBook add: totalPrice .
	^totalPrice.! !

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:08:41'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:08:51'!
charge: aSmallInteger on: aCreditCard 
	self shouldBeImplemented.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:10:49' prior: 50860531!
charge: aCharge on: aCreditCard 
	self error: Cashier CreditCardWithoutCredit.! !

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:10:54'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:11:08'!
CreditCardWithoutCredit
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:11:45' prior: 50860545!
CreditCardWithoutCredit
	^ 'La tarjeta no tiene suficiente cr�dito.'! !

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:11:47'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:12:32' prior: 50860428!
test06

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CreditCardWithoutCreditError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:13:08'!
CreditCardWithoutCreditError
	^ 'La tarjeta no tiene suficiente cr�dito.'! !

!methodRemoval: Cashier class #CreditCardWithoutCredit stamp: 'JA 6/14/2021 19:13:08'!
CreditCardWithoutCredit
	^ 'La tarjeta no tiene suficiente cr�dito.'!

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:13:22'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:13:45' prior: 50860537!
charge: aCharge on: aCreditCard 
	self error: Cashier CreditCardWithoutCreditError.! !

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:13:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 19:13:54'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 19:13:54'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 19:13:54'!
ERROR!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 19:13:54'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 19:13:54'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:13:54'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 19:14:33'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:15:17' prior: 50860002!
test01CanNotCheckoutEmptyCart

	|cart catalog cashier priceList aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CanNotCheckoutEmptyCart. 
			self assert: aSalesBook isEmpty.]! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 19:15:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 19:15:22'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 19:15:22'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 19:15:22'!
ERROR!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 19:15:22'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 19:15:22'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:15:22'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:15:34' prior: 50860107!
test02CanNotCheckoutCartWithNonPricedItem

	|cart catalog cashier priceList aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. 
			self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:15:47' prior: 50860150!
test03CheckoutCartWithOneItemReturnsThePriceOfThatItem

	|cart catalog cashier priceList aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.	
	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: 1 equals: aSalesBook first.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:16:03' prior: 50860218!
test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems

	|cart catalog cashier priceList aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.		
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.		
	self assert: 2 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: 2 equals: aSalesBook first.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:16:14' prior: 50860283!
test05CanNotCheckoutWithExpiratedCreditCard

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self expiredCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:19:34' prior: 50860558!
test06

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: Cashier CreditCardWithoutCreditError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CreditCardWithoutCreditError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:19:43'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:19:51'!
raiseErrorOnCharge: aString 
	self shouldBeImplemented.! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'JA 6/14/2021 19:20:22'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'messageError'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:20:19' prior: 50860812!
raiseErrorOnCharge: aMessageError 
	messageError := aMessageError.! !

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:20:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 19:20:24'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 19:20:24'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 19:20:24'!
ERROR!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 19:20:24'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 19:20:24'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:20:24'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:21:11' prior: 50860598!
charge: aCharge on: aCreditCard 
	messageError ifNotNil: [	self error: messageError].! !

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:21:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 19:21:19'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 19:21:19'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 19:21:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 19:21:19'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 19:21:19'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:21:19'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:30:06'!
test07

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: Cashier StolenCreditCardError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier StolenCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test07 stamp: 'JA 6/14/2021 19:30:10'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:30:26'!
StolenCreditCardError
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:31:11' prior: 50860913!
StolenCreditCardError
 	^ 'La tarjeta de cr�dito es robada'! !

!testRun: #CashierTest #test07 stamp: 'JA 6/14/2021 19:31:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 19:31:13'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 19:31:13'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 19:31:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 19:31:13'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 19:31:13'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:31:13'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'JA 6/14/2021 19:31:13'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:31:41'!
test08

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: Cashier FakeCreditCardError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier FakeCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test08 stamp: 'JA 6/14/2021 19:31:48'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:31:56'!
FakeCreditCardError
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:32:16' prior: 50860978!
FakeCreditCardError
	^'La tarjeta de cr�dito es falsa'! !

!testRun: #CashierTest #test08 stamp: 'JA 6/14/2021 19:32:17'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 19:32:17'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 19:32:17'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 19:32:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 19:32:17'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 19:32:17'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'JA 6/14/2021 19:32:17'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'JA 6/14/2021 19:32:17'!
PASSED!

!testRun: #CashierTest #test08 stamp: 'JA 6/14/2021 19:32:17'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:34:50'!
test06CanNotCheckoutWithACreditCardWithoutCredit

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: Cashier CreditCardWithoutCreditError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CreditCardWithoutCreditError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!methodRemoval: CashierTest #test06 stamp: 'JA 6/14/2021 19:34:50'!
test06

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: Cashier CreditCardWithoutCreditError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CreditCardWithoutCreditError.
			self assert: aSalesBook isEmpty ]	.
		
		
		!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:35:28'!
test07CanNotCheckoutWithAStolenCreditCard

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: Cashier StolenCreditCardError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier StolenCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!methodRemoval: CashierTest #test07 stamp: 'JA 6/14/2021 19:35:28'!
test07

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: Cashier StolenCreditCardError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier StolenCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:35:59'!
test08CanNotCheckoutWithAFakeCreditCard

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: Cashier FakeCreditCardError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier FakeCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!methodRemoval: CashierTest #test08 stamp: 'JA 6/14/2021 19:35:59'!
test08

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: Cashier FakeCreditCardError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier FakeCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		!

!testRun: #CashierTest #test08CanNotCheckoutWithAFakeCreditCard stamp: 'JA 6/14/2021 19:36:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 19:36:06'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 19:36:06'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 19:36:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 19:36:06'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 19:36:06'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithACreditCardWithoutCredit stamp: 'JA 6/14/2021 19:36:06'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithAStolenCreditCard stamp: 'JA 6/14/2021 19:36:06'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutWithAFakeCreditCard stamp: 'JA 6/14/2021 19:36:06'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithACreditCardWithoutCredit stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithAStolenCreditCard stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutWithAFakeCreditCard stamp: 'JA 6/14/2021 19:36:10'!
PASSED!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'JA 6/14/2021 19:40:39'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'no messages' stamp: 'JA 6/14/2021 19:44:26'!
test01
	self should: [ CreditCard owner: 'Juan' number: '1234' expiration: GregorianMonthOfYear current.]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard  	] ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:46:55' prior: 50861286!
test01
	self should: [ CreditCard owner: 'Juan' number: '1234' expiration: GregorianMonthOfYear current.]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard InvalidCreditCardError equals: anException messageText	] ! !

!testRun: #CreditCardTest #test01 stamp: 'JA 6/14/2021 19:47:00'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:47:11'!
InvalidCreditCardError
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:47:59' prior: 50861308!
InvalidCreditCardError
	^'Los datos de la tarjeta de cr�dito son inv�lidos'! !

!testRun: #CreditCardTest #test01 stamp: 'JA 6/14/2021 19:48:01'!
FAILURE!

!testRun: #CreditCardTest #test01 stamp: 'JA 6/14/2021 19:48:32'!
FAILURE!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:49:05' prior: 50859949!
assertCreditCardNumberIsValid: aString 
	
	aString size = 16 ifFalse: [self error: self InvalidCreditCardError ]! !

!testRun: #CreditCardTest #test01 stamp: 'JA 6/14/2021 19:49:10'!
PASSED!

!testRun: #CreditCardTest #test01 stamp: 'JA 6/14/2021 19:49:10'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:50:52'!
test02
	self should: [ CreditCard owner: 'Juan' number: '1234567890ABCDEF' expiration: GregorianMonthOfYear current.]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard InvalidCreditCardError equals: anException messageText	] ! !

!testRun: #CreditCardTest #test02 stamp: 'JA 6/14/2021 19:50:53'!
FAILURE!

!testRun: #CreditCardTest #test02 stamp: 'JA 6/14/2021 19:51:32'!
FAILURE!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:56:53' prior: 50861324!
assertCreditCardNumberIsValid: aString 
	
	aString size = 16 ifFalse: [self error: self InvalidCreditCardError ].
	(aString allSatisfy: [:aDigit | aDigit isDigit]	) ifFalse: [self error: self InvalidCreditCardError ].! !

!testRun: #CreditCardTest #test02 stamp: 'JA 6/14/2021 19:56:54'!
PASSED!

!testRun: #CreditCardTest #test01 stamp: 'JA 6/14/2021 19:56:54'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'JA 6/14/2021 19:56:54'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'JA 6/14/2021 19:56:57'!
PASSED!

!testRun: #CreditCardTest #test01 stamp: 'JA 6/14/2021 19:56:57'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'JA 6/14/2021 19:56:57'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 19:57:43'!
test03
	self should: [ CreditCard owner: '    ' number: '1234567890123456' expiration: GregorianMonthOfYear current.]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard InvalidCreditCardError equals: anException messageText	] ! !

!testRun: #CreditCardTest #test03 stamp: 'JA 6/14/2021 19:57:44'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'JA 6/14/2021 19:58:44' prior: 50859938!
owner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear 
	self assertCreditCardNumberIsValid: aCreditCardNumberString.
	self assertNonBlankOwner.
	^self new initializeOwner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear ! !

!testRun: #CreditCardTest #test03 stamp: 'JA 6/14/2021 19:58:48'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'JA 6/14/2021 19:59:51' prior: 50861389!
owner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear 
	self assertCreditCardNumberIsValid: aCreditCardNumberString.
	self assertNonBlankOwner: anOwnerString.
	^self new initializeOwner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear ! !

!testRun: #CreditCardTest #test03 stamp: 'JA 6/14/2021 19:59:54'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 20:00:22' prior: 50861375!
test03
	self should: [ CreditCard owner: '    ' number: '1234567890123456' expiration: GregorianMonthOfYear current.]
	 	raise:  Error - MessageNotUnderstood 
		withExceptionDo:[ :anException | self assert: CreditCard InvalidCreditCardError equals: anException messageText	] ! !

!testRun: #CreditCardTest #test03 stamp: 'JA 6/14/2021 20:00:23'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 20:00:37'!
assertNonBlankOwner: aString 
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 20:53:24' prior: 50861433!
assertNonBlankOwner: anOwnerString
	anOwnerString withBlanksTrimmed isEmpty
	
	! !

!testRun: #CreditCardTest #test03 stamp: 'JA 6/14/2021 20:53:25'!
FAILURE!

'   ' withBlanksTrimmed !

'   ' withBlanksTrimmed  isEmpty!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 20:57:02' prior: 50861438!
assertNonBlankOwner: anOwnerString
	anOwnerString withBlanksTrimmed isEmpty ifTrue: [self error: self InvalidCreditCardError ]
	
	! !

!testRun: #CreditCardTest #test03 stamp: 'JA 6/14/2021 20:57:21'!
PASSED!

!testRun: #CreditCardTest #test01 stamp: 'JA 6/14/2021 20:57:21'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'JA 6/14/2021 20:57:21'!
PASSED!

!testRun: #CreditCardTest #test03 stamp: 'JA 6/14/2021 20:57:21'!
PASSED!
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(OrderedCollection
		cover: (71 to: 87)
		declaredAt: (71 to: 87)) new ] valueCoveringAll:
		{89 to: 91})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JA 6/14/2021 20:59:34'!
PASSED!
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includes:
		(anItem
			cover: (48 to: 53)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 46}) ifFalse: [
		[
		(self coverAll:
			{67 to: 70}) error:
			([
			(self coverAll:
				{79 to: 82}) invalidItemErrorMessage ] valueCoveringAll:
				{84 to: 106}) ] valueCoveringAll:
			{72 to: 77} ]] valueCoveringAll:
		{56 to: 63}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JA 6/14/2021 20:59:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JA 6/14/2021 20:59:34'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JA 6/14/2021 20:59:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JA 6/14/2021 20:59:34'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JA 6/14/2021 20:59:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JA 6/14/2021 20:59:34'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JA 6/14/2021 20:59:34'!
PASSED!
!Behavior method!
with: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessorSimulator
	^ [
	([
	(self coverAll:
		{96 to: 99}) new ] valueCoveringAll:
		{101 to: 103})
		initializeWith:
			(aPriceList
				cover: (121 to: 130)
				declaredAt: (7 to: 16))
		registerSalesOn:
			(aSalesBook
				cover: (149 to: 158)
				declaredAt: (35 to: 44))
		merchantProcessor:
			(aMerchantProcessorSimulator
				cover: (179 to: 205)
				declaredAt: (65 to: 91)) ] valueCoveringAll:
		{105 to: 119. 132 to: 147. 160 to: 177}.! !
!Behavior method!
initializeWith: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessorSimulator
	(priceList _ aPriceList
		cover: (120 to: 129)
		declaredAt: (17 to: 26))
		cover: (107 to: 115)
		declaredAt: (107 to: 115).
	(salesBook _ aSalesBook
		cover: (146 to: 155)
		declaredAt: (45 to: 54))
		cover: (133 to: 141)
		declaredAt: (133 to: 141).
	(merchantProcessorSimulator _ aMerchantProcessorSimulator
		cover: (189 to: 215)
		declaredAt: (75 to: 101))
		cover: (159 to: 184)
		declaredAt: (159 to: 184).! !
!Behavior method!
owner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear
	[
	(self coverAll:
		{90 to: 93}) assertCreditCardNumberIsValid:
		(aCreditCardNumberString
			cover: (126 to: 148)
			declaredAt: (30 to: 52)) ] valueCoveringAll:
		{95 to: 124}.
	[
	(self coverAll:
		{152 to: 155}) assertNonBlankOwner:
		(anOwnerString
			cover: (178 to: 190)
			declaredAt: (8 to: 20)) ] valueCoveringAll:
		{157 to: 176}.
	^ [
	([
	(self coverAll:
		{195 to: 198}) new ] valueCoveringAll:
		{200 to: 202})
		initializeOwner:
			(anOwnerString
				cover: (221 to: 233)
				declaredAt: (8 to: 20))
		number:
			(aCreditCardNumberString
				cover: (243 to: 265)
				declaredAt: (30 to: 52))
		expiration:
			(aGregorianMonthOfYear
				cover: (279 to: 299)
				declaredAt: (66 to: 86)) ] valueCoveringAll:
		{204 to: 219. 235 to: 241. 267 to: 277}.! !
!Behavior method!
assertCreditCardNumberIsValid: aString
	[
	([
	([
	(aString
		cover: (44 to: 50)
		declaredAt: (32 to: 38)) size ] valueCoveringAll:
		{52 to: 55}) =
		(16 coverAll:
			{59 to: 60}) ] valueCoveringAll:
		{57 to: 57}) ifFalse: [
		[
		(self coverAll:
			{72 to: 75}) error:
			([
			(self coverAll:
				{84 to: 87}) InvalidCreditCardError ] valueCoveringAll:
				{89 to: 110}) ] valueCoveringAll:
			{77 to: 82} ]] valueCoveringAll:
		{62 to: 69}.
	[
	([
	(aString
		cover: (117 to: 123)
		declaredAt: (32 to: 38)) allSatisfy: [ :aDigit |
		[
		(aDigit
			cover: (148 to: 153)
			declaredAt: (139 to: 144)) isDigit ] valueCoveringAll:
			{155 to: 161} ]] valueCoveringAll:
		{125 to: 135}) ifFalse: [
		[
		(self coverAll:
			{176 to: 179}) error:
			([
			(self coverAll:
				{188 to: 191}) InvalidCreditCardError ] valueCoveringAll:
				{193 to: 214}) ] valueCoveringAll:
			{181 to: 186} ]] valueCoveringAll:
		{166 to: 173}.! !
!Behavior method!
assertNonBlankOwner: anOwnerString
	[
	([
	([
	(anOwnerString
		cover: (37 to: 49)
		declaredAt: (22 to: 34)) withBlanksTrimmed ] valueCoveringAll:
		{51 to: 67}) isEmpty ] valueCoveringAll:
		{69 to: 75}) ifTrue: [
		[
		(self coverAll:
			{86 to: 89}) error:
			([
			(self coverAll:
				{98 to: 101}) InvalidCreditCardError ] valueCoveringAll:
				{103 to: 124}) ] valueCoveringAll:
			{91 to: 96} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
initializeOwner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear
	(ownerString _ anOwnerString
		cover: (116 to: 128)
		declaredAt: (18 to: 30))
		cover: (101 to: 111)
		declaredAt: (101 to: 111).
	(creditCardNumberString _ aCreditCardNumberString
		cover: (158 to: 180)
		declaredAt: (40 to: 62))
		cover: (132 to: 153)
		declaredAt: (132 to: 153).
	(gregorianMonthOfYear _ aGregorianMonthOfYear
		cover: (208 to: 228)
		declaredAt: (76 to: 96))
		cover: (184 to: 203)
		declaredAt: (184 to: 203).! !
!Behavior method!
checkout: aCart withCreditCard: aCreditCard
	| totalPrice |
	[
	(self coverAll:
		{61 to: 64}) assertCartIsNotEmpty:
		(aCart
			cover: (88 to: 92)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{66 to: 86}.
	[
	(self coverAll:
		{96 to: 99}) assertCreditCardIsValid:
		(aCreditCard
			cover: (126 to: 136)
			declaredAt: (33 to: 43)) ] valueCoveringAll:
		{101 to: 124}.
	(totalPrice _ 0 coverAll:
		{154 to: 154})
		cover: (140 to: 149)
		declaredAt: (48 to: 57).
	[
	(aCart
		cover: (158 to: 162)
		declaredAt: (11 to: 15)) do: [ :anElement |
		(totalPrice _ [
		([
		(totalPrice
			cover: (182 to: 191)
			declaredAt: (48 to: 57)) +
			(priceList
				cover: (209 to: 217)
				declaredAt: (209 to: 217)) ] valueCoveringAll:
			{207 to: 207})
			at:
				(anElement
					cover: (223 to: 231)
					declaredAt: (170 to: 178))
			ifAbsent: [
				[
				(self coverAll:
					{244 to: 247}) itemNotInPriceListError ] valueCoveringAll:
					{249 to: 271} ]] valueCoveringAll:
			{219 to: 221. 233 to: 241})
			cover: (196 to: 205)
			declaredAt: (48 to: 57) ]] valueCoveringAll:
		{164 to: 166}.
	[
	(merchantProcessorSimulator
		cover: (278 to: 303)
		declaredAt: (278 to: 303))
		charge:
			(totalPrice
				cover: (313 to: 322)
				declaredAt: (48 to: 57))
		on:
			(aCreditCard
				cover: (329 to: 339)
				declaredAt: (33 to: 43)) ] valueCoveringAll:
		{305 to: 311. 325 to: 327}.
	[
	(salesBook
		cover: (344 to: 352)
		declaredAt: (344 to: 352)) add:
		(totalPrice
			cover: (359 to: 368)
			declaredAt: (48 to: 57)) ] valueCoveringAll:
		{354 to: 357}.
	^ totalPrice
		cover: (374 to: 383)
		declaredAt: (48 to: 57).! !
!Behavior method!
assertCartIsNotEmpty: aCart
	^ [
	([
	(aCart
		cover: (33 to: 37)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{39 to: 45}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			([
			(self coverAll:
				{69 to: 72}) class ] valueCoveringAll:
				{74 to: 78}) CanNotCheckoutEmptyCart ] valueCoveringAll:
				{80 to: 102}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.! !
!Behavior method!
CanNotCheckoutEmptyCart
	^ 'The cart is empty' coverAll:
		{27 to: 45}.! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 20:59:34'!
PASSED!
!Behavior method!
assertCreditCardIsValid: aCreditCard
	[
	([
	([
	(aCreditCard
		cover: (41 to: 51)
		declaredAt: (26 to: 36)) expirationDate ] valueCoveringAll:
		{53 to: 66}) <
		([
		(GregorianMonthOfYear
			cover: (70 to: 89)
			declaredAt: (70 to: 89)) current ] valueCoveringAll:
			{91 to: 97}) ] valueCoveringAll:
		{68 to: 68}) ifTrue: [
		[
		(self coverAll:
			{108 to: 111}) error:
			([
			([
			(self coverAll:
				{120 to: 123}) class ] valueCoveringAll:
				{125 to: 129}) ExpiredCreditCardError ] valueCoveringAll:
				{131 to: 152}) ] valueCoveringAll:
			{113 to: 118} ]] valueCoveringAll:
		{99 to: 105}.! !
!Behavior method!
expirationDate
	^ gregorianMonthOfYear
		cover: (19 to: 38)
		declaredAt: (19 to: 38).! !
!Behavior method!
do: aBlockClosure
	[
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) do:
		(aBlockClosure
			cover: (31 to: 43)
			declaredAt: (5 to: 17)) ] valueCoveringAll:
		{27 to: 29}.! !
!Behavior method!
itemNotInPriceListError
	^ [
	(self coverAll:
		{29 to: 32}) error:
		([
		([
		(self coverAll:
			{41 to: 44}) class ] valueCoveringAll:
			{46 to: 50}) AnItemIsNotInThePriceList ] valueCoveringAll:
			{52 to: 76}) ] valueCoveringAll:
		{34 to: 39}.! !
!Behavior method!
AnItemIsNotInThePriceList
	^ 'An item in the cart is not in the price list' coverAll:
		{29 to: 74}.! !

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 20:59:34'!
PASSED!
!Behavior method!
charge: aCharge on: aCreditCard
	[
	(messageError
		cover: (35 to: 46)
		declaredAt: (35 to: 46)) ifNotNil: [
		[
		(self coverAll:
			{60 to: 63}) error:
			(messageError
				cover: (72 to: 83)
				declaredAt: (35 to: 46)) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{48 to: 56}.! !

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 20:59:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 20:59:35'!
PASSED!
!Behavior method!
ExpiredCreditCardError
	^ 'The credit card is expired' coverAll:
		{26 to: 53}.! !

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 20:59:35'!
PASSED!
!Behavior method!
CreditCardWithoutCreditError
	^ 'La tarjeta no tiene suficiente cr�dito.' coverAll:
		{33 to: 73}.! !
!Behavior method!
raiseErrorOnCharge: aMessageError
	(messageError _ aMessageError
		cover: (53 to: 65)
		declaredAt: (21 to: 33))
		cover: (37 to: 48)
		declaredAt: (37 to: 48).! !

!testRun: #CashierTest #test06CanNotCheckoutWithACreditCardWithoutCredit stamp: 'JA 6/14/2021 20:59:35'!
PASSED!
!Behavior method!
StolenCreditCardError
	^ 'La tarjeta de cr�dito es robada' coverAll:
		{27 to: 59}.! !

!testRun: #CashierTest #test07CanNotCheckoutWithAStolenCreditCard stamp: 'JA 6/14/2021 20:59:35'!
PASSED!
!Behavior method!
FakeCreditCardError
	^ 'La tarjeta de cr�dito es falsa' coverAll:
		{23 to: 54}.! !

!testRun: #CashierTest #test08CanNotCheckoutWithAFakeCreditCard stamp: 'JA 6/14/2021 20:59:35'!
PASSED!
!Behavior method!
InvalidCreditCardError
	^ 'Los datos de la tarjeta de cr�dito son inv�lidos' coverAll:
		{26 to: 75}.! !

!testRun: #CreditCardTest #test01 stamp: 'JA 6/14/2021 20:59:35'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'JA 6/14/2021 20:59:35'!
PASSED!

!testRun: #CreditCardTest #test03 stamp: 'JA 6/14/2021 20:59:35'!
PASSED!

!methodRemoval: Cashier class #with: stamp: 'JA 6/14/2021 21:07:34'!
with: aPriceList 
	^self new initializeWith: aPriceList!

!methodRemoval: Cashier class #with:registerSalesOn: stamp: 'JA 6/14/2021 21:07:36'!
with: aPriceList registerSalesOn: aSalesBook 
	
	^self new initializeWith: aPriceList registerSalesOn: aSalesBook!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 21:07:39'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 21:07:39'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 21:07:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 21:07:39'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 21:07:39'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithACreditCardWithoutCredit stamp: 'JA 6/14/2021 21:07:39'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithAStolenCreditCard stamp: 'JA 6/14/2021 21:07:39'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutWithAFakeCreditCard stamp: 'JA 6/14/2021 21:07:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 21:07:44'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 21:07:44'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 21:07:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 21:07:44'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 21:07:44'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithACreditCardWithoutCredit stamp: 'JA 6/14/2021 21:07:44'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithAStolenCreditCard stamp: 'JA 6/14/2021 21:07:44'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutWithAFakeCreditCard stamp: 'JA 6/14/2021 21:07:44'!
PASSED!
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(OrderedCollection
		cover: (71 to: 87)
		declaredAt: (71 to: 87)) new ] valueCoveringAll:
		{89 to: 91})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JA 6/14/2021 21:07:56'!
PASSED!
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includes:
		(anItem
			cover: (48 to: 53)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 46}) ifFalse: [
		[
		(self coverAll:
			{67 to: 70}) error:
			([
			(self coverAll:
				{79 to: 82}) invalidItemErrorMessage ] valueCoveringAll:
				{84 to: 106}) ] valueCoveringAll:
			{72 to: 77} ]] valueCoveringAll:
		{56 to: 63}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JA 6/14/2021 21:07:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JA 6/14/2021 21:07:56'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JA 6/14/2021 21:07:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JA 6/14/2021 21:07:56'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JA 6/14/2021 21:07:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JA 6/14/2021 21:07:56'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JA 6/14/2021 21:07:56'!
PASSED!
!Behavior method!
with: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessorSimulator
	^ [
	([
	(self coverAll:
		{96 to: 99}) new ] valueCoveringAll:
		{101 to: 103})
		initializeWith:
			(aPriceList
				cover: (121 to: 130)
				declaredAt: (7 to: 16))
		registerSalesOn:
			(aSalesBook
				cover: (149 to: 158)
				declaredAt: (35 to: 44))
		merchantProcessor:
			(aMerchantProcessorSimulator
				cover: (179 to: 205)
				declaredAt: (65 to: 91)) ] valueCoveringAll:
		{105 to: 119. 132 to: 147. 160 to: 177}.! !
!Behavior method!
initializeWith: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessorSimulator
	(priceList _ aPriceList
		cover: (120 to: 129)
		declaredAt: (17 to: 26))
		cover: (107 to: 115)
		declaredAt: (107 to: 115).
	(salesBook _ aSalesBook
		cover: (146 to: 155)
		declaredAt: (45 to: 54))
		cover: (133 to: 141)
		declaredAt: (133 to: 141).
	(merchantProcessorSimulator _ aMerchantProcessorSimulator
		cover: (189 to: 215)
		declaredAt: (75 to: 101))
		cover: (159 to: 184)
		declaredAt: (159 to: 184).! !
!Behavior method!
owner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear
	[
	(self coverAll:
		{90 to: 93}) assertCreditCardNumberIsValid:
		(aCreditCardNumberString
			cover: (126 to: 148)
			declaredAt: (30 to: 52)) ] valueCoveringAll:
		{95 to: 124}.
	[
	(self coverAll:
		{152 to: 155}) assertNonBlankOwner:
		(anOwnerString
			cover: (178 to: 190)
			declaredAt: (8 to: 20)) ] valueCoveringAll:
		{157 to: 176}.
	^ [
	([
	(self coverAll:
		{195 to: 198}) new ] valueCoveringAll:
		{200 to: 202})
		initializeOwner:
			(anOwnerString
				cover: (221 to: 233)
				declaredAt: (8 to: 20))
		number:
			(aCreditCardNumberString
				cover: (243 to: 265)
				declaredAt: (30 to: 52))
		expiration:
			(aGregorianMonthOfYear
				cover: (279 to: 299)
				declaredAt: (66 to: 86)) ] valueCoveringAll:
		{204 to: 219. 235 to: 241. 267 to: 277}.! !
!Behavior method!
assertCreditCardNumberIsValid: aString
	[
	([
	([
	(aString
		cover: (44 to: 50)
		declaredAt: (32 to: 38)) size ] valueCoveringAll:
		{52 to: 55}) =
		(16 coverAll:
			{59 to: 60}) ] valueCoveringAll:
		{57 to: 57}) ifFalse: [
		[
		(self coverAll:
			{72 to: 75}) error:
			([
			(self coverAll:
				{84 to: 87}) InvalidCreditCardError ] valueCoveringAll:
				{89 to: 110}) ] valueCoveringAll:
			{77 to: 82} ]] valueCoveringAll:
		{62 to: 69}.
	[
	([
	(aString
		cover: (117 to: 123)
		declaredAt: (32 to: 38)) allSatisfy: [ :aDigit |
		[
		(aDigit
			cover: (148 to: 153)
			declaredAt: (139 to: 144)) isDigit ] valueCoveringAll:
			{155 to: 161} ]] valueCoveringAll:
		{125 to: 135}) ifFalse: [
		[
		(self coverAll:
			{176 to: 179}) error:
			([
			(self coverAll:
				{188 to: 191}) InvalidCreditCardError ] valueCoveringAll:
				{193 to: 214}) ] valueCoveringAll:
			{181 to: 186} ]] valueCoveringAll:
		{166 to: 173}.! !
!Behavior method!
assertNonBlankOwner: anOwnerString
	[
	([
	([
	(anOwnerString
		cover: (37 to: 49)
		declaredAt: (22 to: 34)) withBlanksTrimmed ] valueCoveringAll:
		{51 to: 67}) isEmpty ] valueCoveringAll:
		{69 to: 75}) ifTrue: [
		[
		(self coverAll:
			{86 to: 89}) error:
			([
			(self coverAll:
				{98 to: 101}) InvalidCreditCardError ] valueCoveringAll:
				{103 to: 124}) ] valueCoveringAll:
			{91 to: 96} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
initializeOwner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear
	(ownerString _ anOwnerString
		cover: (116 to: 128)
		declaredAt: (18 to: 30))
		cover: (101 to: 111)
		declaredAt: (101 to: 111).
	(creditCardNumberString _ aCreditCardNumberString
		cover: (158 to: 180)
		declaredAt: (40 to: 62))
		cover: (132 to: 153)
		declaredAt: (132 to: 153).
	(gregorianMonthOfYear _ aGregorianMonthOfYear
		cover: (208 to: 228)
		declaredAt: (76 to: 96))
		cover: (184 to: 203)
		declaredAt: (184 to: 203).! !
!Behavior method!
checkout: aCart withCreditCard: aCreditCard
	| totalPrice |
	[
	(self coverAll:
		{61 to: 64}) assertCartIsNotEmpty:
		(aCart
			cover: (88 to: 92)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{66 to: 86}.
	[
	(self coverAll:
		{96 to: 99}) assertCreditCardIsValid:
		(aCreditCard
			cover: (126 to: 136)
			declaredAt: (33 to: 43)) ] valueCoveringAll:
		{101 to: 124}.
	(totalPrice _ 0 coverAll:
		{154 to: 154})
		cover: (140 to: 149)
		declaredAt: (48 to: 57).
	[
	(aCart
		cover: (158 to: 162)
		declaredAt: (11 to: 15)) do: [ :anElement |
		(totalPrice _ [
		([
		(totalPrice
			cover: (182 to: 191)
			declaredAt: (48 to: 57)) +
			(priceList
				cover: (209 to: 217)
				declaredAt: (209 to: 217)) ] valueCoveringAll:
			{207 to: 207})
			at:
				(anElement
					cover: (223 to: 231)
					declaredAt: (170 to: 178))
			ifAbsent: [
				[
				(self coverAll:
					{244 to: 247}) itemNotInPriceListError ] valueCoveringAll:
					{249 to: 271} ]] valueCoveringAll:
			{219 to: 221. 233 to: 241})
			cover: (196 to: 205)
			declaredAt: (48 to: 57) ]] valueCoveringAll:
		{164 to: 166}.
	[
	(merchantProcessorSimulator
		cover: (278 to: 303)
		declaredAt: (278 to: 303))
		charge:
			(totalPrice
				cover: (313 to: 322)
				declaredAt: (48 to: 57))
		on:
			(aCreditCard
				cover: (329 to: 339)
				declaredAt: (33 to: 43)) ] valueCoveringAll:
		{305 to: 311. 325 to: 327}.
	[
	(salesBook
		cover: (344 to: 352)
		declaredAt: (344 to: 352)) add:
		(totalPrice
			cover: (359 to: 368)
			declaredAt: (48 to: 57)) ] valueCoveringAll:
		{354 to: 357}.
	^ totalPrice
		cover: (374 to: 383)
		declaredAt: (48 to: 57).! !
!Behavior method!
assertCartIsNotEmpty: aCart
	^ [
	([
	(aCart
		cover: (33 to: 37)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{39 to: 45}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			([
			(self coverAll:
				{69 to: 72}) class ] valueCoveringAll:
				{74 to: 78}) CanNotCheckoutEmptyCart ] valueCoveringAll:
				{80 to: 102}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.! !
!Behavior method!
CanNotCheckoutEmptyCart
	^ 'The cart is empty' coverAll:
		{27 to: 45}.! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 21:07:56'!
PASSED!
!Behavior method!
assertCreditCardIsValid: aCreditCard
	[
	([
	([
	(aCreditCard
		cover: (41 to: 51)
		declaredAt: (26 to: 36)) expirationDate ] valueCoveringAll:
		{53 to: 66}) <
		([
		(GregorianMonthOfYear
			cover: (70 to: 89)
			declaredAt: (70 to: 89)) current ] valueCoveringAll:
			{91 to: 97}) ] valueCoveringAll:
		{68 to: 68}) ifTrue: [
		[
		(self coverAll:
			{108 to: 111}) error:
			([
			([
			(self coverAll:
				{120 to: 123}) class ] valueCoveringAll:
				{125 to: 129}) ExpiredCreditCardError ] valueCoveringAll:
				{131 to: 152}) ] valueCoveringAll:
			{113 to: 118} ]] valueCoveringAll:
		{99 to: 105}.! !
!Behavior method!
expirationDate
	^ gregorianMonthOfYear
		cover: (19 to: 38)
		declaredAt: (19 to: 38).! !
!Behavior method!
do: aBlockClosure
	[
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) do:
		(aBlockClosure
			cover: (31 to: 43)
			declaredAt: (5 to: 17)) ] valueCoveringAll:
		{27 to: 29}.! !
!Behavior method!
itemNotInPriceListError
	^ [
	(self coverAll:
		{29 to: 32}) error:
		([
		([
		(self coverAll:
			{41 to: 44}) class ] valueCoveringAll:
			{46 to: 50}) AnItemIsNotInThePriceList ] valueCoveringAll:
			{52 to: 76}) ] valueCoveringAll:
		{34 to: 39}.! !
!Behavior method!
AnItemIsNotInThePriceList
	^ 'An item in the cart is not in the price list' coverAll:
		{29 to: 74}.! !

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 21:07:56'!
PASSED!
!Behavior method!
charge: aCharge on: aCreditCard
	[
	(messageError
		cover: (35 to: 46)
		declaredAt: (35 to: 46)) ifNotNil: [
		[
		(self coverAll:
			{60 to: 63}) error:
			(messageError
				cover: (72 to: 83)
				declaredAt: (35 to: 46)) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{48 to: 56}.! !

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 21:07:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 21:07:56'!
PASSED!
!Behavior method!
ExpiredCreditCardError
	^ 'The credit card is expired' coverAll:
		{26 to: 53}.! !

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 21:07:56'!
PASSED!
!Behavior method!
CreditCardWithoutCreditError
	^ 'La tarjeta no tiene suficiente cr�dito.' coverAll:
		{33 to: 73}.! !
!Behavior method!
raiseErrorOnCharge: aMessageError
	(messageError _ aMessageError
		cover: (53 to: 65)
		declaredAt: (21 to: 33))
		cover: (37 to: 48)
		declaredAt: (37 to: 48).! !

!testRun: #CashierTest #test06CanNotCheckoutWithACreditCardWithoutCredit stamp: 'JA 6/14/2021 21:07:56'!
PASSED!
!Behavior method!
StolenCreditCardError
	^ 'La tarjeta de cr�dito es robada' coverAll:
		{27 to: 59}.! !

!testRun: #CashierTest #test07CanNotCheckoutWithAStolenCreditCard stamp: 'JA 6/14/2021 21:07:56'!
PASSED!
!Behavior method!
FakeCreditCardError
	^ 'La tarjeta de cr�dito es falsa' coverAll:
		{23 to: 54}.! !

!testRun: #CashierTest #test08CanNotCheckoutWithAFakeCreditCard stamp: 'JA 6/14/2021 21:07:56'!
PASSED!
!Behavior method!
InvalidCreditCardError
	^ 'Los datos de la tarjeta de cr�dito son inv�lidos' coverAll:
		{26 to: 75}.! !

!testRun: #CreditCardTest #test01 stamp: 'JA 6/14/2021 21:07:56'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'JA 6/14/2021 21:07:56'!
PASSED!

!testRun: #CreditCardTest #test03 stamp: 'JA 6/14/2021 21:07:56'!
PASSED!

!methodRemoval: Cashier #initializeWith: stamp: 'JA 6/14/2021 21:09:47'!
initializeWith: aPriceList 

	priceList := aPriceList.!

!methodRemoval: Cashier #initializeWith:registerSalesOn: stamp: 'JA 6/14/2021 21:09:49'!
initializeWith: aPriceList registerSalesOn: aSalesBook 	
	priceList := aPriceList.
	salesBook := aSalesBook.!
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(OrderedCollection
		cover: (71 to: 87)
		declaredAt: (71 to: 87)) new ] valueCoveringAll:
		{89 to: 91})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includes:
		(anItem
			cover: (48 to: 53)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 46}) ifFalse: [
		[
		(self coverAll:
			{67 to: 70}) error:
			([
			(self coverAll:
				{79 to: 82}) invalidItemErrorMessage ] valueCoveringAll:
				{84 to: 106}) ] valueCoveringAll:
			{72 to: 77} ]] valueCoveringAll:
		{56 to: 63}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JA 6/14/2021 21:09:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JA 6/14/2021 21:09:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JA 6/14/2021 21:09:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!Behavior method!
with: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessorSimulator
	^ [
	([
	(self coverAll:
		{96 to: 99}) new ] valueCoveringAll:
		{101 to: 103})
		initializeWith:
			(aPriceList
				cover: (121 to: 130)
				declaredAt: (7 to: 16))
		registerSalesOn:
			(aSalesBook
				cover: (149 to: 158)
				declaredAt: (35 to: 44))
		merchantProcessor:
			(aMerchantProcessorSimulator
				cover: (179 to: 205)
				declaredAt: (65 to: 91)) ] valueCoveringAll:
		{105 to: 119. 132 to: 147. 160 to: 177}.! !
!Behavior method!
initializeWith: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessorSimulator
	(priceList _ aPriceList
		cover: (120 to: 129)
		declaredAt: (17 to: 26))
		cover: (107 to: 115)
		declaredAt: (107 to: 115).
	(salesBook _ aSalesBook
		cover: (146 to: 155)
		declaredAt: (45 to: 54))
		cover: (133 to: 141)
		declaredAt: (133 to: 141).
	(merchantProcessorSimulator _ aMerchantProcessorSimulator
		cover: (189 to: 215)
		declaredAt: (75 to: 101))
		cover: (159 to: 184)
		declaredAt: (159 to: 184).! !
!Behavior method!
owner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear
	[
	(self coverAll:
		{90 to: 93}) assertCreditCardNumberIsValid:
		(aCreditCardNumberString
			cover: (126 to: 148)
			declaredAt: (30 to: 52)) ] valueCoveringAll:
		{95 to: 124}.
	[
	(self coverAll:
		{152 to: 155}) assertNonBlankOwner:
		(anOwnerString
			cover: (178 to: 190)
			declaredAt: (8 to: 20)) ] valueCoveringAll:
		{157 to: 176}.
	^ [
	([
	(self coverAll:
		{195 to: 198}) new ] valueCoveringAll:
		{200 to: 202})
		initializeOwner:
			(anOwnerString
				cover: (221 to: 233)
				declaredAt: (8 to: 20))
		number:
			(aCreditCardNumberString
				cover: (243 to: 265)
				declaredAt: (30 to: 52))
		expiration:
			(aGregorianMonthOfYear
				cover: (279 to: 299)
				declaredAt: (66 to: 86)) ] valueCoveringAll:
		{204 to: 219. 235 to: 241. 267 to: 277}.! !
!Behavior method!
assertCreditCardNumberIsValid: aString
	[
	([
	([
	(aString
		cover: (44 to: 50)
		declaredAt: (32 to: 38)) size ] valueCoveringAll:
		{52 to: 55}) =
		(16 coverAll:
			{59 to: 60}) ] valueCoveringAll:
		{57 to: 57}) ifFalse: [
		[
		(self coverAll:
			{72 to: 75}) error:
			([
			(self coverAll:
				{84 to: 87}) InvalidCreditCardError ] valueCoveringAll:
				{89 to: 110}) ] valueCoveringAll:
			{77 to: 82} ]] valueCoveringAll:
		{62 to: 69}.
	[
	([
	(aString
		cover: (117 to: 123)
		declaredAt: (32 to: 38)) allSatisfy: [ :aDigit |
		[
		(aDigit
			cover: (148 to: 153)
			declaredAt: (139 to: 144)) isDigit ] valueCoveringAll:
			{155 to: 161} ]] valueCoveringAll:
		{125 to: 135}) ifFalse: [
		[
		(self coverAll:
			{176 to: 179}) error:
			([
			(self coverAll:
				{188 to: 191}) InvalidCreditCardError ] valueCoveringAll:
				{193 to: 214}) ] valueCoveringAll:
			{181 to: 186} ]] valueCoveringAll:
		{166 to: 173}.! !
!Behavior method!
assertNonBlankOwner: anOwnerString
	[
	([
	([
	(anOwnerString
		cover: (37 to: 49)
		declaredAt: (22 to: 34)) withBlanksTrimmed ] valueCoveringAll:
		{51 to: 67}) isEmpty ] valueCoveringAll:
		{69 to: 75}) ifTrue: [
		[
		(self coverAll:
			{86 to: 89}) error:
			([
			(self coverAll:
				{98 to: 101}) InvalidCreditCardError ] valueCoveringAll:
				{103 to: 124}) ] valueCoveringAll:
			{91 to: 96} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
initializeOwner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear
	(ownerString _ anOwnerString
		cover: (116 to: 128)
		declaredAt: (18 to: 30))
		cover: (101 to: 111)
		declaredAt: (101 to: 111).
	(creditCardNumberString _ aCreditCardNumberString
		cover: (158 to: 180)
		declaredAt: (40 to: 62))
		cover: (132 to: 153)
		declaredAt: (132 to: 153).
	(gregorianMonthOfYear _ aGregorianMonthOfYear
		cover: (208 to: 228)
		declaredAt: (76 to: 96))
		cover: (184 to: 203)
		declaredAt: (184 to: 203).! !
!Behavior method!
checkout: aCart withCreditCard: aCreditCard
	| totalPrice |
	[
	(self coverAll:
		{61 to: 64}) assertCartIsNotEmpty:
		(aCart
			cover: (88 to: 92)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{66 to: 86}.
	[
	(self coverAll:
		{96 to: 99}) assertCreditCardIsValid:
		(aCreditCard
			cover: (126 to: 136)
			declaredAt: (33 to: 43)) ] valueCoveringAll:
		{101 to: 124}.
	(totalPrice _ 0 coverAll:
		{154 to: 154})
		cover: (140 to: 149)
		declaredAt: (48 to: 57).
	[
	(aCart
		cover: (158 to: 162)
		declaredAt: (11 to: 15)) do: [ :anElement |
		(totalPrice _ [
		([
		(totalPrice
			cover: (182 to: 191)
			declaredAt: (48 to: 57)) +
			(priceList
				cover: (209 to: 217)
				declaredAt: (209 to: 217)) ] valueCoveringAll:
			{207 to: 207})
			at:
				(anElement
					cover: (223 to: 231)
					declaredAt: (170 to: 178))
			ifAbsent: [
				[
				(self coverAll:
					{244 to: 247}) itemNotInPriceListError ] valueCoveringAll:
					{249 to: 271} ]] valueCoveringAll:
			{219 to: 221. 233 to: 241})
			cover: (196 to: 205)
			declaredAt: (48 to: 57) ]] valueCoveringAll:
		{164 to: 166}.
	[
	(merchantProcessorSimulator
		cover: (278 to: 303)
		declaredAt: (278 to: 303))
		charge:
			(totalPrice
				cover: (313 to: 322)
				declaredAt: (48 to: 57))
		on:
			(aCreditCard
				cover: (329 to: 339)
				declaredAt: (33 to: 43)) ] valueCoveringAll:
		{305 to: 311. 325 to: 327}.
	[
	(salesBook
		cover: (344 to: 352)
		declaredAt: (344 to: 352)) add:
		(totalPrice
			cover: (359 to: 368)
			declaredAt: (48 to: 57)) ] valueCoveringAll:
		{354 to: 357}.
	^ totalPrice
		cover: (374 to: 383)
		declaredAt: (48 to: 57).! !
!Behavior method!
assertCartIsNotEmpty: aCart
	^ [
	([
	(aCart
		cover: (33 to: 37)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{39 to: 45}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			([
			(self coverAll:
				{69 to: 72}) class ] valueCoveringAll:
				{74 to: 78}) CanNotCheckoutEmptyCart ] valueCoveringAll:
				{80 to: 102}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.! !
!Behavior method!
CanNotCheckoutEmptyCart
	^ 'The cart is empty' coverAll:
		{27 to: 45}.! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!Behavior method!
assertCreditCardIsValid: aCreditCard
	[
	([
	([
	(aCreditCard
		cover: (41 to: 51)
		declaredAt: (26 to: 36)) expirationDate ] valueCoveringAll:
		{53 to: 66}) <
		([
		(GregorianMonthOfYear
			cover: (70 to: 89)
			declaredAt: (70 to: 89)) current ] valueCoveringAll:
			{91 to: 97}) ] valueCoveringAll:
		{68 to: 68}) ifTrue: [
		[
		(self coverAll:
			{108 to: 111}) error:
			([
			([
			(self coverAll:
				{120 to: 123}) class ] valueCoveringAll:
				{125 to: 129}) ExpiredCreditCardError ] valueCoveringAll:
				{131 to: 152}) ] valueCoveringAll:
			{113 to: 118} ]] valueCoveringAll:
		{99 to: 105}.! !
!Behavior method!
expirationDate
	^ gregorianMonthOfYear
		cover: (19 to: 38)
		declaredAt: (19 to: 38).! !
!Behavior method!
do: aBlockClosure
	[
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) do:
		(aBlockClosure
			cover: (31 to: 43)
			declaredAt: (5 to: 17)) ] valueCoveringAll:
		{27 to: 29}.! !
!Behavior method!
itemNotInPriceListError
	^ [
	(self coverAll:
		{29 to: 32}) error:
		([
		([
		(self coverAll:
			{41 to: 44}) class ] valueCoveringAll:
			{46 to: 50}) AnItemIsNotInThePriceList ] valueCoveringAll:
			{52 to: 76}) ] valueCoveringAll:
		{34 to: 39}.! !
!Behavior method!
AnItemIsNotInThePriceList
	^ 'An item in the cart is not in the price list' coverAll:
		{29 to: 74}.! !

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!Behavior method!
charge: aCharge on: aCreditCard
	[
	(messageError
		cover: (35 to: 46)
		declaredAt: (35 to: 46)) ifNotNil: [
		[
		(self coverAll:
			{60 to: 63}) error:
			(messageError
				cover: (72 to: 83)
				declaredAt: (35 to: 46)) ] valueCoveringAll:
			{65 to: 70} ]] valueCoveringAll:
		{48 to: 56}.! !

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/14/2021 21:09:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!Behavior method!
ExpiredCreditCardError
	^ 'The credit card is expired' coverAll:
		{26 to: 53}.! !

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!Behavior method!
CreditCardWithoutCreditError
	^ 'La tarjeta no tiene suficiente cr�dito.' coverAll:
		{33 to: 73}.! !
!Behavior method!
raiseErrorOnCharge: aMessageError
	(messageError _ aMessageError
		cover: (53 to: 65)
		declaredAt: (21 to: 33))
		cover: (37 to: 48)
		declaredAt: (37 to: 48).! !

!testRun: #CashierTest #test06CanNotCheckoutWithACreditCardWithoutCredit stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!Behavior method!
StolenCreditCardError
	^ 'La tarjeta de cr�dito es robada' coverAll:
		{27 to: 59}.! !

!testRun: #CashierTest #test07CanNotCheckoutWithAStolenCreditCard stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!Behavior method!
FakeCreditCardError
	^ 'La tarjeta de cr�dito es falsa' coverAll:
		{23 to: 54}.! !

!testRun: #CashierTest #test08CanNotCheckoutWithAFakeCreditCard stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!Behavior method!
InvalidCreditCardError
	^ 'Los datos de la tarjeta de cr�dito son inv�lidos' coverAll:
		{26 to: 75}.! !

!testRun: #CreditCardTest #test01 stamp: 'JA 6/14/2021 21:09:57'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'JA 6/14/2021 21:09:57'!
PASSED!

!testRun: #CreditCardTest #test03 stamp: 'JA 6/14/2021 21:09:57'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 21:26:34'!
test01CanNotCreateCreditCardWithNumberOfIncorrectSize
	self should: [ CreditCard owner: 'Juan' number: '1234' expiration: GregorianMonthOfYear current.]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard InvalidCreditCardError equals: anException messageText	] ! !

!methodRemoval: CreditCardTest #test01 stamp: 'JA 6/14/2021 21:26:34'!
test01
	self should: [ CreditCard owner: 'Juan' number: '1234' expiration: GregorianMonthOfYear current.]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard InvalidCreditCardError equals: anException messageText	] !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 21:27:03'!
test01CanNotCreateCreditCardWithIncorrectSizeNumber
	self should: [ CreditCard owner: 'Juan' number: '1234' expiration: GregorianMonthOfYear current.]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard InvalidCreditCardError equals: anException messageText	] ! !

!methodRemoval: CreditCardTest #test01CanNotCreateCreditCardWithNumberOfIncorrectSize stamp: 'JA 6/14/2021 21:27:03'!
test01CanNotCreateCreditCardWithNumberOfIncorrectSize
	self should: [ CreditCard owner: 'Juan' number: '1234' expiration: GregorianMonthOfYear current.]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard InvalidCreditCardError equals: anException messageText	] !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 21:28:29'!
test02CanNotCreateCreditCardWithAlphaNumericNumber
	self should: [ CreditCard owner: 'Juan' number: '1234567890ABCDEF' expiration: GregorianMonthOfYear current.]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard InvalidCreditCardError equals: anException messageText	] ! !

!methodRemoval: CreditCardTest #test02 stamp: 'JA 6/14/2021 21:28:29'!
test02
	self should: [ CreditCard owner: 'Juan' number: '1234567890ABCDEF' expiration: GregorianMonthOfYear current.]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard InvalidCreditCardError equals: anException messageText	] !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'JA 6/14/2021 21:29:10'!
test03CanNotCreateCreditCardWithBlankOwner
	self should: [ CreditCard owner: '    ' number: '1234567890123456' expiration: GregorianMonthOfYear current.]
	 	raise:  Error - MessageNotUnderstood 
		withExceptionDo:[ :anException | self assert: CreditCard InvalidCreditCardError equals: anException messageText	] ! !

!methodRemoval: CreditCardTest #test03 stamp: 'JA 6/14/2021 21:29:10'!
test03
	self should: [ CreditCard owner: '    ' number: '1234567890123456' expiration: GregorianMonthOfYear current.]
	 	raise:  Error - MessageNotUnderstood 
		withExceptionDo:[ :anException | self assert: CreditCard InvalidCreditCardError equals: anException messageText	] !

----QUIT----(14 June 2021 21:33:09) CuisUniversity-4532.image priorSource: 16891931!

----STARTUP---- (16 June 2021 17:00:45) as C:\Users\ezequ\Desktop\windows64\CuisUniversity-4532.image!

!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:02:28' prior: 51044305!
test08CanNotCheckoutWithAFakeCreditCard

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor messageError |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = messageError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test08CanNotCheckoutWithAFakeCreditCard stamp: 'ET 6/16/2021 17:02:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:02:35'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:02:35'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:02:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:02:35'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:02:35'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithACreditCardWithoutCredit stamp: 'ET 6/16/2021 17:02:35'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithAStolenCreditCard stamp: 'ET 6/16/2021 17:02:35'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutWithAFakeCreditCard stamp: 'ET 6/16/2021 17:02:35'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:04:45'!
test06CanNotCheckoutIfMerchantProcessorRaisesError

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor messageError |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = messageError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!methodRemoval: CashierTest #test06CanNotCheckoutWithACreditCardWithoutCredit stamp: 'ET 6/16/2021 17:04:49'!
test06CanNotCheckoutWithACreditCardWithoutCredit

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: Cashier CreditCardWithoutCreditError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CreditCardWithoutCreditError.
			self assert: aSalesBook isEmpty ]	.
		
		
		!

!methodRemoval: CashierTest #test07CanNotCheckoutWithAStolenCreditCard stamp: 'ET 6/16/2021 17:04:52'!
test07CanNotCheckoutWithAStolenCreditCard

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: Cashier StolenCreditCardError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier StolenCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		!

!methodRemoval: CashierTest #test08CanNotCheckoutWithAFakeCreditCard stamp: 'ET 6/16/2021 17:04:54'!
test08CanNotCheckoutWithAFakeCreditCard

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor messageError |
	
	catalog := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = messageError.
			self assert: aSalesBook isEmpty ]	.
		
		
		!

!methodRemoval: Cashier class #StolenCreditCardError stamp: 'ET 6/16/2021 17:05:17'!
StolenCreditCardError
 	^ 'La tarjeta de cr�dito es robada'!

!methodRemoval: Cashier class #FakeCreditCardError stamp: 'ET 6/16/2021 17:05:20'!
FakeCreditCardError
	^'La tarjeta de cr�dito es falsa'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:11:03' prior: 51044120!
test01CanNotCheckoutEmptyCart

	|cart catalog cashier priceList aSalesBook aMerchantProcessor |
	
	catalog := OrderedCollection new.
	priceList := Dictionary new.
	cart := Cart acceptingItemsOf: priceList keys.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CanNotCheckoutEmptyCart. 
			self assert: aSalesBook isEmpty.]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:11:17' prior: 51045578!
test01CanNotCheckoutEmptyCart

	|cart cashier priceList aSalesBook aMerchantProcessor |

	priceList := Dictionary new.
	cart := Cart acceptingItemsOf: priceList keys.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CanNotCheckoutEmptyCart. 
			self assert: aSalesBook isEmpty.]! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:11:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:11:18'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:11:18'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:11:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:11:18'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:11:18'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:11:18'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:12:13' prior: 51045444!
test06CanNotCheckoutIfMerchantProcessorRaisesError

	|cart catalog cashier priceList creditCard aSalesBook aMerchantProcessor messageError |
	
	catalog := OrderedCollection new.
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: catalog.
	catalog add: 'book'.
	cart add: 'book'.
	
	
	
	
	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = messageError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:12:26' prior: 51045649!
test06CanNotCheckoutIfMerchantProcessorRaisesError

	|cart cashier priceList creditCard aSalesBook aMerchantProcessor messageError |

	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	
	
	
	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = messageError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:12:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:12:29'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:12:29'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:12:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:12:29'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:12:29'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:12:29'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:12:57' prior: 51044217!
test05CanNotCheckoutWithExpiratedCreditCard

	|cart cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self expiredCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:13:04' prior: 51045736!
test05CanNotCheckoutWithExpiratedCreditCard

	|cart cashier priceList creditCard aSalesBook aMerchantProcessor |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self expiredCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:13:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:13:05'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:13:05'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:13:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:13:05'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:13:05'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:13:05'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:13:37' prior: 51044192!
test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems

	|cart cashier priceList aSalesBook aMerchantProcessor |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	cart add: 'book'.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.		
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.		
	self assert: 2 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: 2 equals: aSalesBook first.! !

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:13:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:13:40'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:13:40'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:13:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:13:40'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:13:40'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:13:40'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:14:31' prior: 51044168!
test03CheckoutCartWithOneItemReturnsThePriceOfThatItem

	|cart cashier priceList aSalesBook aMerchantProcessor |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	cart add: 'book'.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.	
	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: 1 equals: aSalesBook first.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:14:37' prior: 51045864!
test03CheckoutCartWithOneItemReturnsThePriceOfThatItem

	|cart cashier priceList aSalesBook aMerchantProcessor |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.	
	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: 1 equals: aSalesBook first.! !

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:14:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:14:37'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:14:37'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:14:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:14:38'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:14:38'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:14:38'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:16:08' prior: 51044143!
test02CanNotCheckoutCartWithNonPricedItem

	|cart cashier priceList aSalesBook aMerchantProcessor |
	
	cart := Cart acceptingItemsOf: (Array with: 'book').
	cart add: 'book'.
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. 
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:16:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:16:08'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:16:08'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:16:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:16:08'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:16:08'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:16:08'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:16:41' prior: 51045681!
test06CanNotCheckoutIfMerchantProcessorRaisesError

	|cart cashier priceList creditCard aSalesBook aMerchantProcessor messageError |

	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.

	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = messageError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:19:41'!
newCashierWithPriceList: aPriceList salesBook: aSalesBook
	
	^Cashier with: aPriceList registerSalesOn: aSalesBook merchantProcessor: MerchantProcessorSimulator new.
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:20:50' prior: 51045764!
test05CanNotCheckoutWithExpiratedCreditCard

	|cart cashier priceList creditCard aSalesBook |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
		
	creditCard := self expiredCreditCard.

	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ExpiredCreditCardError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:21:08' prior: 51045815!
test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems

	|cart cashier priceList aSalesBook |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	cart add: 'book'.
	
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	self assert: 2 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: 2 equals: aSalesBook first.! !

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:21:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:21:11'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:21:11'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:21:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:21:11'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:21:11'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:21:11'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:21:22' prior: 51045887!
test03CheckoutCartWithOneItemReturnsThePriceOfThatItem

	|cart cashier priceList aSalesBook |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: 1 equals: aSalesBook first.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:21:34' prior: 51045935!
test02CanNotCheckoutCartWithNonPricedItem

	|cart cashier priceList aSalesBook |
	
	cart := Cart acceptingItemsOf: (Array with: 'book').
	cart add: 'book'.
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	self should: [cashier checkout: cart withCreditCard: self validCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. 
			self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:21:41' prior: 51045602!
test01CanNotCheckoutEmptyCart

	|cart cashier priceList aSalesBook |

	priceList := Dictionary new.
	cart := Cart acceptingItemsOf: priceList keys.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CanNotCheckoutEmptyCart. 
			self assert: aSalesBook isEmpty.]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:31:51'!
assertCashier: aCashier checkout: aCart  with: aCreditCard raisesErrorMessage: anErrorMessage forSalesBook: aSalesBook
	self should: [aCashier checkout: aCart  withCreditCard: aCreditCard]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = anErrorMessage.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:33:34' prior: 51046130!
test01CanNotCheckoutEmptyCart

	|cart cashier priceList aSalesBook |

	priceList := Dictionary new.
	cart := Cart acceptingItemsOf: priceList keys.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self 
		assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: Cashier CanNotCheckoutEmptyCart
		forSalesBook: aSalesBook.! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:33:36'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:33:36'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:33:36'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:33:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:33:36'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:33:36'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:33:36'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:33:52' prior: 51046110!
test02CanNotCheckoutCartWithNonPricedItem

	|cart cashier priceList aSalesBook |
	
	cart := Cart acceptingItemsOf: (Array with: 'book').
	cart add: 'book'.
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	self 	assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: Cashier CanNotCheckoutEmptyCart
		forSalesBook: aSalesBook.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:34:02' prior: 51046205!
test02CanNotCheckoutCartWithNonPricedItem

	|cart cashier priceList aSalesBook |
	
	cart := Cart acceptingItemsOf: (Array with: 'book').
	cart add: 'book'.
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	self 	assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: Cashier AnItemIsNotInThePriceList 
		forSalesBook: aSalesBook.! !

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:34:04'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:34:04'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:34:04'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:34:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:34:04'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:34:04'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:34:04'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:34:38' prior: 51045983!
test06CanNotCheckoutIfMerchantProcessorRaisesError

	|cart cashier priceList creditCard aSalesBook aMerchantProcessor messageError |

	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.

	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self 	assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: messageError
		forSalesBook: aSalesBook.
		
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:34:55' prior: 51046266!
test06CanNotCheckoutIfMerchantProcessorRaisesError

	|cart cashier priceList aSalesBook aMerchantProcessor messageError |

	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.

	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
	
	
	self 	assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: messageError
		forSalesBook: aSalesBook.
		
		
		! !

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:34:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:34:56'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:34:56'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:34:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:34:56'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:34:56'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:34:56'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:35:27' prior: 51046021!
test05CanNotCheckoutWithExpiratedCreditCard

	|cart cashier priceList creditCard aSalesBook |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
		
	creditCard := self expiredCreditCard.

	
	self 	assertCashier: cashier  
		checkout: cart
		with: self expiredCreditCard 
		raisesErrorMessage: Cashier ExpiredCreditCardError 
		forSalesBook: aSalesBook.
		
		
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:35:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:35:31'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:35:31'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:35:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:35:31'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:35:31'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:35:31'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:35:40' prior: 51046343!
test05CanNotCheckoutWithExpiratedCreditCard

	|cart cashier priceList aSalesBook |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self 	assertCashier: cashier  
		checkout: cart
		with: self expiredCreditCard 
		raisesErrorMessage: Cashier ExpiredCreditCardError 
		forSalesBook: aSalesBook.
		
		
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:35:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:35:45'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 17:35:45'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 17:35:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 17:35:45'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:35:45'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 17:35:45'!
PASSED!

!methodRemoval: Cashier class #CreditCardWithoutCreditError stamp: 'ET 6/16/2021 17:36:06'!
CreditCardWithoutCreditError
	^ 'La tarjeta no tiene suficiente cr�dito.'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:36:27'!
test05CanNotCheckoutWithExpiredCreditCard

	|cart cashier priceList aSalesBook |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self 	assertCashier: cashier  
		checkout: cart
		with: self expiredCreditCard 
		raisesErrorMessage: Cashier ExpiredCreditCardError 
		forSalesBook: aSalesBook.
		
		
		! !

!methodRemoval: CashierTest #test05CanNotCheckoutWithExpiratedCreditCard stamp: 'ET 6/16/2021 17:36:27'!
test05CanNotCheckoutWithExpiratedCreditCard

	|cart cashier priceList aSalesBook |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self 	assertCashier: cashier  
		checkout: cart
		with: self expiredCreditCard 
		raisesErrorMessage: Cashier ExpiredCreditCardError 
		forSalesBook: aSalesBook.
		
		
		!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:37:13'!
anItemIsNotInThePriceList
	^'An item in the cart is not in the price list'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:37:13' prior: 51044508!
itemNotInPriceListError

	^ self error: self class anItemIsNotInThePriceList! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:37:13' prior: 51046223!
test02CanNotCheckoutCartWithNonPricedItem

	|cart cashier priceList aSalesBook |
	
	cart := Cart acceptingItemsOf: (Array with: 'book').
	cart add: 'book'.
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	self 	assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: Cashier anItemIsNotInThePriceList 
		forSalesBook: aSalesBook.! !

!methodRemoval: Cashier class #AnItemIsNotInThePriceList stamp: 'ET 6/16/2021 17:37:13'!
AnItemIsNotInThePriceList
	^'An item in the cart is not in the price list'.!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:37:23'!
expiredCreditCardError
	^'The credit card is expired'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:37:23' prior: 51044519!
assertCreditCardIsValid: aCreditCard
	
	aCreditCard expirationDate < GregorianMonthOfYear current ifTrue: [self error: self class expiredCreditCardError].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:37:23' prior: 51046438!
test05CanNotCheckoutWithExpiredCreditCard

	|cart cashier priceList aSalesBook |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self 	assertCashier: cashier  
		checkout: cart
		with: self expiredCreditCard 
		raisesErrorMessage: Cashier expiredCreditCardError 
		forSalesBook: aSalesBook.
		
		
		! !

!methodRemoval: Cashier class #ExpiredCreditCardError stamp: 'ET 6/16/2021 17:37:23'!
ExpiredCreditCardError
	^'The credit card is expired'.!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:37:33'!
canNotCheckoutEmptyCart
	^'The cart is empty'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:37:33' prior: 51046164!
test01CanNotCheckoutEmptyCart

	|cart cashier priceList aSalesBook |

	priceList := Dictionary new.
	cart := Cart acceptingItemsOf: priceList keys.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self 
		assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: Cashier canNotCheckoutEmptyCart
		forSalesBook: aSalesBook.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:37:33' prior: 51044513!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [	self error: self class canNotCheckoutEmptyCart]! !

!methodRemoval: Cashier class #CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:37:33'!
CanNotCheckoutEmptyCart
	^'The cart is empty'.!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:38:56'!
itemNotInPriceListErrorDescription
	^'An item in the cart is not in the price list'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:38:57' prior: 51046482!
itemNotInPriceListError

	^ self error: self class itemNotInPriceListErrorDescription! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:38:57' prior: 51046488!
test02CanNotCheckoutCartWithNonPricedItem

	|cart cashier priceList aSalesBook |
	
	cart := Cart acceptingItemsOf: (Array with: 'book').
	cart add: 'book'.
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	self 	assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: Cashier itemNotInPriceListErrorDescription 
		forSalesBook: aSalesBook.! !

!methodRemoval: Cashier class #anItemIsNotInThePriceList stamp: 'ET 6/16/2021 17:38:57'!
anItemIsNotInThePriceList
	^'An item in the cart is not in the price list'.!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:39:07'!
expiredCreditCardErrorDescription
	^'The credit card is expired'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:39:07' prior: 51046516!
assertCreditCardIsValid: aCreditCard
	
	aCreditCard expirationDate < GregorianMonthOfYear current ifTrue: [self error: self class expiredCreditCardErrorDescription].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:39:07' prior: 51046524!
test05CanNotCheckoutWithExpiredCreditCard

	|cart cashier priceList aSalesBook |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self 	assertCashier: cashier  
		checkout: cart
		with: self expiredCreditCard 
		raisesErrorMessage: Cashier expiredCreditCardErrorDescription 
		forSalesBook: aSalesBook.
		
		
		! !

!methodRemoval: Cashier class #expiredCreditCardError stamp: 'ET 6/16/2021 17:39:07'!
expiredCreditCardError
	^'The credit card is expired'.!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:39:23'!
emptyCartErrorDescription
	^'The cart is empty'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:39:23' prior: 51046552!
test01CanNotCheckoutEmptyCart

	|cart cashier priceList aSalesBook |

	priceList := Dictionary new.
	cart := Cart acceptingItemsOf: priceList keys.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self 
		assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: Cashier emptyCartErrorDescription
		forSalesBook: aSalesBook.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:39:23' prior: 51046569!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [	self error: self class emptyCartErrorDescription]! !

!methodRemoval: Cashier class #canNotCheckoutEmptyCart stamp: 'ET 6/16/2021 17:39:23'!
canNotCheckoutEmptyCart
	^'The cart is empty'.!
!Cashier methodsFor: 'assertions' stamp: 'ET 6/16/2021 17:40:18'!
assertCreditCardIsNotExpired: aCreditCard
	
	aCreditCard expirationDate < GregorianMonthOfYear current ifTrue: [self error: self class expiredCreditCardErrorDescription].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:40:18' prior: 51044493!
checkout: aCart withCreditCard: aCreditCard 
	|totalPrice|
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	totalPrice := 0.
	aCart do: [:anElement | totalPrice := totalPrice + priceList at: anElement ifAbsent: [self itemNotInPriceListError].].
	merchantProcessorSimulator charge: totalPrice  on: aCreditCard .
	salesBook add: totalPrice .
	^totalPrice.! !

!methodRemoval: Cashier #assertCreditCardIsValid: stamp: 'ET 6/16/2021 17:40:18'!
assertCreditCardIsValid: aCreditCard
	
	aCreditCard expirationDate < GregorianMonthOfYear current ifTrue: [self error: self class expiredCreditCardErrorDescription].!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:42:04'!
raiseItemNotInPriceListError

	^ self error: self class itemNotInPriceListErrorDescription! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:42:04' prior: 51046693!
checkout: aCart withCreditCard: aCreditCard 
	|totalPrice|
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	totalPrice := 0.
	aCart do: [:anElement | totalPrice := totalPrice + priceList at: anElement ifAbsent: [self raiseItemNotInPriceListError].].
	merchantProcessorSimulator charge: totalPrice  on: aCreditCard .
	salesBook add: totalPrice .
	^totalPrice.! !

!methodRemoval: Cashier #itemNotInPriceListError stamp: 'ET 6/16/2021 17:42:04'!
itemNotInPriceListError

	^ self error: self class itemNotInPriceListErrorDescription!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ET 6/16/2021 17:42:56'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:42:56' prior: 51044483!
initializeWith: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessorSimulator 
	
	priceList := aPriceList.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessorSimulator.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:42:56' prior: 51046722!
checkout: aCart withCreditCard: aCreditCard 
	|totalPrice|
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	totalPrice := 0.
	aCart do: [:anElement | totalPrice := totalPrice + priceList at: anElement ifAbsent: [self raiseItemNotInPriceListError].].
	merchantProcessor charge: totalPrice  on: aCreditCard .
	salesBook add: totalPrice .
	^totalPrice.! !
!Cashier methodsFor: 'initialization' stamp: 'ET 6/16/2021 17:43:07' prior: 51046751!
initializeWith: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor 
	
	priceList := aPriceList.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.! !
!Cashier class methodsFor: 'instance creation' stamp: 'ET 6/16/2021 17:43:19' prior: 51044534!
with: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor 
	^self new initializeWith: aPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:44:16'!
invalidCreditCardErrorDescription
	^'Los datos de la tarjeta de cr�dito son inv�lidos'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:44:16' prior: 51044629!
assertCreditCardNumberIsValid: aString 
	
	aString size = 16 ifFalse: [self error: self invalidCreditCardErrorDescription ].
	(aString allSatisfy: [:aDigit | aDigit isDigit]	) ifFalse: [self error: self invalidCreditCardErrorDescription ].! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:44:16' prior: 51044639!
assertNonBlankOwner: anOwnerString
	anOwnerString withBlanksTrimmed isEmpty ifTrue: [self error: self invalidCreditCardErrorDescription ]
	
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:44:16' prior: 51044353!
test01CanNotCreateCreditCardWithIncorrectSizeNumber
	self should: [ CreditCard owner: 'Juan' number: '1234' expiration: GregorianMonthOfYear current.]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard invalidCreditCardErrorDescription equals: anException messageText	] ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:44:16' prior: 51044377!
test03CanNotCreateCreditCardWithBlankOwner
	self should: [ CreditCard owner: '    ' number: '1234567890123456' expiration: GregorianMonthOfYear current.]
	 	raise:  Error - MessageNotUnderstood 
		withExceptionDo:[ :anException | self assert: CreditCard invalidCreditCardErrorDescription equals: anException messageText	] ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:44:16' prior: 51044365!
test02CanNotCreateCreditCardWithAlphaNumericNumber
	self should: [ CreditCard owner: 'Juan' number: '1234567890ABCDEF' expiration: GregorianMonthOfYear current.]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard invalidCreditCardErrorDescription equals: anException messageText	] ! !

!methodRemoval: CreditCard class #InvalidCreditCardError stamp: 'ET 6/16/2021 17:44:16'!
InvalidCreditCardError
	^'Los datos de la tarjeta de cr�dito son inv�lidos'!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:47:39'!
newCreditCardOwnedBy: anOwner withNumber: aString
	^CreditCard owner: anOwner number: aString expiration: GregorianMonthOfYear current.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:48:19' prior: 51046819!
test01CanNotCreateCreditCardWithIncorrectSizeNumber
	self should: [self newCreditCardOwnedBy: 'Juan' withNumber: 1234]
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard invalidCreditCardErrorDescription equals: anException messageText	] ! !

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithIncorrectSizeNumber stamp: 'ET 6/16/2021 17:48:21'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:48:38' prior: 51046872!
test01CanNotCreateCreditCardWithIncorrectSizeNumber
	self should: [self newCreditCardOwnedBy: 'Juan' withNumber: '1234']
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard invalidCreditCardErrorDescription equals: anException messageText	] ! !

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithIncorrectSizeNumber stamp: 'ET 6/16/2021 17:48:39'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithIncorrectSizeNumber stamp: 'ET 6/16/2021 17:48:39'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithAlphaNumericNumber stamp: 'ET 6/16/2021 17:48:39'!
PASSED!

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 17:48:39'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:49:07' prior: 51046846!
test02CanNotCreateCreditCardWithAlphaNumericNumber
	self should: [ self newCreditCardOwnedBy: 'Juan' withNumber: '1234567890ABCDEF']
	 	raise:  Error
		withExceptionDo:[ :anException | self assert: CreditCard invalidCreditCardErrorDescription equals: anException messageText	] ! !

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 17:49:12'!
PASSED!

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 17:49:14'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithIncorrectSizeNumber stamp: 'ET 6/16/2021 17:49:14'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithAlphaNumericNumber stamp: 'ET 6/16/2021 17:49:14'!
PASSED!

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 17:49:14'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:49:46' prior: 51046832!
test03CanNotCreateCreditCardWithBlankOwner
	self should: [ self newCreditCardOwnedBy: '    '  withNumber: '1234567890123456']
	 	raise:  Error - MessageNotUnderstood 
		withExceptionDo:[ :anException | self assert: CreditCard invalidCreditCardErrorDescription equals: anException messageText	] ! !

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 17:49:47'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithIncorrectSizeNumber stamp: 'ET 6/16/2021 17:49:47'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithAlphaNumericNumber stamp: 'ET 6/16/2021 17:49:47'!
PASSED!

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 17:49:47'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:56:41'!
assertNewCreditCardRaisesErrorOwnedBy: anOwner withNumber: aStringNumber
	self should: [CreditCard owner: anOwner  number: aStringNumber expiration: GregorianMonthOfYear current]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo:[ :anError| self assert: CreditCard invalidCreditCardErrorDescription equals: anError messageText	] ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:57:08' prior: 51046888!
test01CanNotCreateCreditCardWithIncorrectSizeNumber
	
	self assertNewCreditCardRaisesErrorOwnedBy: 'Juan' withNumber: '1234'.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:57:30' prior: 51046915!
test02CanNotCreateCreditCardWithAlphaNumericNumber

	self assertNewCreditCardRaisesErrorOwnedBy: 'Juan' withNumber: '1234567890ABCDEF'.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:57:57' prior: 51046945!
test03CanNotCreateCreditCardWithBlankOwner

	self assertNewCreditCardRaisesErrorOwnedBy: '    '  withNumber: '1234567890123456'.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:58:00' prior: 51047002!
test03CanNotCreateCreditCardWithBlankOwner

	self assertNewCreditCardRaisesErrorOwnedBy: '    ' withNumber: '1234567890123456'.! !

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 17:58:01'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithIncorrectSizeNumber stamp: 'ET 6/16/2021 17:58:01'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithAlphaNumericNumber stamp: 'ET 6/16/2021 17:58:01'!
PASSED!

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 17:58:01'!
PASSED!

!methodRemoval: CreditCardTest #newCreditCardOwnedBy:withNumber: stamp: 'ET 6/16/2021 17:58:06'!
newCreditCardOwnedBy: anOwner withNumber: aString
	^CreditCard owner: anOwner number: aString expiration: GregorianMonthOfYear current.!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:58:33'!
assertCreditCardInstanceCreationRaisesErrorWhenOwnedBy: anOwner withNumber: aStringNumber
	self should: [CreditCard owner: anOwner  number: aStringNumber expiration: GregorianMonthOfYear current]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo:[ :anError| self assert: CreditCard invalidCreditCardErrorDescription equals: anError messageText	] ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:58:33' prior: 51046986!
test01CanNotCreateCreditCardWithIncorrectSizeNumber
	
	self assertCreditCardInstanceCreationRaisesErrorWhenOwnedBy: 'Juan' withNumber: '1234'.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:58:33' prior: 51046994!
test02CanNotCreateCreditCardWithAlphaNumericNumber

	self assertCreditCardInstanceCreationRaisesErrorWhenOwnedBy: 'Juan' withNumber: '1234567890ABCDEF'.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:58:33' prior: 51047010!
test03CanNotCreateCreditCardWithBlankOwner

	self assertCreditCardInstanceCreationRaisesErrorWhenOwnedBy: '    ' withNumber: '1234567890123456'.! !

!methodRemoval: CreditCardTest #assertNewCreditCardRaisesErrorOwnedBy:withNumber: stamp: 'ET 6/16/2021 17:58:33'!
assertNewCreditCardRaisesErrorOwnedBy: anOwner withNumber: aStringNumber
	self should: [CreditCard owner: anOwner  number: aStringNumber expiration: GregorianMonthOfYear current]
	 	raise: Error - MessageNotUnderstood
		withExceptionDo:[ :anError| self assert: CreditCard invalidCreditCardErrorDescription equals: anError messageText	] !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:02:15'!
assertCashier: aCashier checkout: aCart  with: aCreditCard raisesErrorMessage: anErrorMessage assertingSalesBookIsNotModified: aSalesBook
	self should: [aCashier checkout: aCart  withCreditCard: aCreditCard]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = anErrorMessage.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:02:15' prior: 51046592!
test02CanNotCheckoutCartWithNonPricedItem

	|cart cashier priceList aSalesBook |
	
	cart := Cart acceptingItemsOf: (Array with: 'book').
	cart add: 'book'.
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	self 	assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: Cashier itemNotInPriceListErrorDescription 
		assertingSalesBookIsNotModified: aSalesBook.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:02:15' prior: 51046657!
test01CanNotCheckoutEmptyCart

	|cart cashier priceList aSalesBook |

	priceList := Dictionary new.
	cart := Cart acceptingItemsOf: priceList keys.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self 
		assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: Cashier emptyCartErrorDescription
		assertingSalesBookIsNotModified: aSalesBook.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:02:15' prior: 51046629!
test05CanNotCheckoutWithExpiredCreditCard

	|cart cashier priceList aSalesBook |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self 	assertCashier: cashier  
		checkout: cart
		with: self expiredCreditCard 
		raisesErrorMessage: Cashier expiredCreditCardErrorDescription 
		assertingSalesBookIsNotModified: aSalesBook.
		
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:02:15' prior: 51046293!
test06CanNotCheckoutIfMerchantProcessorRaisesError

	|cart cashier priceList aSalesBook aMerchantProcessor messageError |

	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.

	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
	
	
	self 	assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: messageError
		assertingSalesBookIsNotModified: aSalesBook.
		
		
		! !

!methodRemoval: CashierTest #assertCashier:checkout:with:raisesErrorMessage:forSalesBook: stamp: 'ET 6/16/2021 18:02:15'!
assertCashier: aCashier checkout: aCart  with: aCreditCard raisesErrorMessage: anErrorMessage forSalesBook: aSalesBook
	self should: [aCashier checkout: aCart  withCreditCard: aCreditCard]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = anErrorMessage.
			self assert: aSalesBook isEmpty ]	.
		
		
		!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:21:41' prior: 51047126!
test01CanNotCheckoutEmptyCart

	|cart cashier priceList aSalesBook |

	priceList := Dictionary new.
	cart := Cart acceptingItemsOf: priceList keys.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier CanNotCheckoutEmptyCart. 
			self assert: aSalesBook isEmpty.]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:33:52' prior: 51047107!
test02CanNotCheckoutCartWithNonPricedItem

	|cart cashier priceList aSalesBook |
	
	cart := Cart acceptingItemsOf: (Array with: 'book').
	cart add: 'book'.
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	self 	assertCashier: cashier  
		checkout: cart
		with: self validCreditCard
		raisesErrorMessage: Cashier CanNotCheckoutEmptyCart
		forSalesBook: aSalesBook.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:21:34' prior: 51047224!
test02CanNotCheckoutCartWithNonPricedItem

	|cart cashier priceList aSalesBook |
	
	cart := Cart acceptingItemsOf: (Array with: 'book').
	cart add: 'book'.
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	self should: [cashier checkout: cart withCreditCard: self validCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier AnItemIsNotInThePriceList. 
			self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 17:16:41' prior: 51047164!
test06CanNotCheckoutIfMerchantProcessorRaisesError

	|cart cashier priceList creditCard aSalesBook aMerchantProcessor messageError |

	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.

	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	cashier := Cashier with: priceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
		
	creditCard := self validCreditCard.
	
	
	self should: [ (cashier checkout: cart withCreditCard: creditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = messageError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:05:37' prior: 51047144!
test05CanNotCheckoutWithExpiredCreditCard

	|cart cashier priceList aSalesBook |
	
	priceList := Dictionary new.
	
	priceList add: 'book'->1.
	cart := Cart acceptingItemsOf: priceList keys.
	cart add: 'book'.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self should: [ (cashier checkout: cart withCreditCard: self expiredCreditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCreditCardErrorDescription.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:05:41'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:05:41'!
ERROR!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:05:41'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:05:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:05:41'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:05:41'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:05:41'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:05:54' prior: 51047205!
test01CanNotCheckoutEmptyCart

	|cart cashier priceList aSalesBook |

	priceList := Dictionary new.
	cart := Cart acceptingItemsOf: priceList keys.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorDescription. 
			self assert: aSalesBook isEmpty.]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:06:02' prior: 51047242!
test02CanNotCheckoutCartWithNonPricedItem

	|cart cashier priceList aSalesBook |
	
	cart := Cart acceptingItemsOf: (Array with: 'book').
	cart add: 'book'.
	priceList := Dictionary new.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: priceList salesBook: aSalesBook.
	self should: [cashier checkout: cart withCreditCard: self validCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier itemNotInPriceListErrorDescription. 
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:06:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:06:03'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:06:03'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:06:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:06:03'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:06:03'!
PASSED!

!methodRemoval: CashierTest #assertCashier:checkout:with:raisesErrorMessage:assertingSalesBookIsNotModified: stamp: 'ET 6/16/2021 18:06:12'!
assertCashier: aCashier checkout: aCart  with: aCreditCard raisesErrorMessage: anErrorMessage assertingSalesBookIsNotModified: aSalesBook
	self should: [aCashier checkout: aCart  withCreditCard: aCreditCard]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = anErrorMessage.
			self assert: aSalesBook isEmpty ]	.
		
		
		!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:10:59'!
createCart

	^Cart acceptingItemsOf: self createPriceList keys.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:11:30' prior: 51047415!
createCart

	^Cart acceptingItemsOf: self defaultPriceList keys.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:12:36'!
defaultPriceList

	^Dictionary with: self itemInStore -> self itemInStorePrice.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:12:56'!
itemInStore

	^'book in store'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:13:19'!
itemInStorePrice

	^1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:14:09' prior: 51047339!
test01CanNotCheckoutEmptyCart

	|cart cashier aSalesBook |

	cart := self createCart.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: self defaultPriceList salesBook: aSalesBook.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorDescription. 
			self assert: aSalesBook isEmpty.]! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:14:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:14:14'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:14:14'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:14:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:14:14'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:14:14'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:14:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:14:53' prior: 51047358!
test02CanNotCheckoutCartWithNonPricedItem

	|cart cashier aSalesBook |
	
	cart := self createCart.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: Dictionary new salesBook: aSalesBook.
	self should: [cashier checkout: cart withCreditCard: self validCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier itemNotInPriceListErrorDescription. 
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:14:57'!
FAILURE!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:15:40'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:16:22' prior: 51047421!
createCart

	^Cart acceptingItemsOf: self defaultPriceList keys.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:16:46' prior: 51047482!
test02CanNotCheckoutCartWithNonPricedItem

	|cart cashier aSalesBook |
	
	cart := self createCart.
	cart add: self itemInStore.
	
	aSalesBook := OrderedCollection new.
	
	cashier := self newCashierWithPriceList: Dictionary new salesBook: aSalesBook.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier itemNotInPriceListErrorDescription. 
			self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:16:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:16:50'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:16:50'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:16:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:16:50'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:16:50'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:16:50'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:17:55' prior: 51046090!
test03CheckoutCartWithOneItemReturnsThePriceOfThatItem

	|cart cashier aSalesBook |
	
	cart := self createCart.
	cart add: self itemInStore.
	
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: self defaultPriceList salesBook: aSalesBook.
	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: self itemInStorePrice equals: aSalesBook first.! !

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:18:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:18:00'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:18:00'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:18:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:18:00'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:18:00'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:18:00'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:19:19' prior: 51046044!
test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems

	|cart cashier aSalesBook |

	cart := self createCart.
	cart add: 2 of: self itemInStore.
	
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: self defaultPriceList salesBook: aSalesBook.
	self assert: 2 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: 2 * self itemInStore equals: aSalesBook first.! !

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:19:22'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:19:34' prior: 51047600!
test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems

	|cart cashier aSalesBook |

	cart := self createCart.
	cart add: 2 of: self itemInStore.
	
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: self defaultPriceList salesBook: aSalesBook.
	self assert: 2 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: 2 * self itemInStorePrice equals: aSalesBook first.! !

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:19:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:19:35'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:19:35'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:19:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:19:35'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:19:35'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:19:35'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:19:59' prior: 51047292!
test05CanNotCheckoutWithExpiredCreditCard

	|cart cashier aSalesBook |
	
	cart := self createCart.
	cart add: 'book'.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: self defaultPriceList salesBook: aSalesBook.
	
	self should: [ (cashier checkout: cart withCreditCard: self expiredCreditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCreditCardErrorDescription.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:20:10'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:20:33'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:20:47' prior: 51047667!
test05CanNotCheckoutWithExpiredCreditCard

	|cart cashier aSalesBook |
	
	cart := self createCart.
	cart add: self itemInStore.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithPriceList: self defaultPriceList salesBook: aSalesBook.
	
	self should: [ (cashier checkout: cart withCreditCard: self expiredCreditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCreditCardErrorDescription.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:20:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:20:47'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:20:47'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:20:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:20:47'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:20:47'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:20:47'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:21:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:21:38'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:21:38'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:21:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:21:38'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:21:38'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:21:38'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:23:59' prior: 51047262!
test06CanNotCheckoutIfMerchantProcessorRaisesError

	|cart cashier aSalesBook aMerchantProcessor messageError |

	cart := self createCart.
	cart add: 'book'.

	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	cashier := Cashier with: self defaultPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
	
	
	self should: [ (cashier checkout: cart withCreditCard: self validCreditCard )]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = messageError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:24:28'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 18:24:40' prior: 51047763!
test06CanNotCheckoutIfMerchantProcessorRaisesError

	|cart cashier aSalesBook aMerchantProcessor messageError |

	cart := self createCart.
	cart add: self itemInStore.

	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	cashier := Cashier with: self defaultPriceList registerSalesOn: aSalesBook merchantProcessor: aMerchantProcessor.
	
	
	self should: [ (cashier checkout: cart withCreditCard: self validCreditCard )]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = messageError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:24:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:24:40'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:24:41'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:24:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:24:41'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:24:41'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:24:41'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ET 6/16/2021 18:25:39'!
newCashierWithsalesBook: aSalesBook
	
	^Cashier with: self defaultPriceList registerSalesOn: aSalesBook merchantProcessor: MerchantProcessorSimulator new.
		
		! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:25:42'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:25:42'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:25:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:25:42'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:25:42'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:25:42'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ET 6/16/2021 18:25:49'!
newCashierWithSalesBook: aSalesBook
	
	^Cashier with: self defaultPriceList registerSalesOn: aSalesBook merchantProcessor: MerchantProcessorSimulator new.
		
		! !
!CashierTest methodsFor: 'tests' stamp: 'ET 6/16/2021 18:26:03' prior: 51047440!
test01CanNotCheckoutEmptyCart

	|cart cashier aSalesBook |

	cart := self createCart.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithSalesBook: aSalesBook.
	
	self should: [cashier checkout: cart withCreditCard: self validCreditCard.]
	 raise: Error
	 withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorDescription. 
			self assert: aSalesBook isEmpty.]! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:26:04'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:26:04'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:26:04'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:26:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:26:04'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:26:04'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:26:04'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ET 6/16/2021 18:27:08' prior: 51047557!
test03CheckoutCartWithOneItemReturnsThePriceOfThatItem

	|cart cashier aSalesBook |
	
	cart := self createCart.
	cart add: self itemInStore.
	
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithSalesBook: aSalesBook.
	
	self assert: 1 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: self itemInStorePrice equals: aSalesBook first.! !

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:27:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:27:09'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:27:10'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:27:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:27:10'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:27:10'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:27:10'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ET 6/16/2021 18:27:16' prior: 51047623!
test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems

	|cart cashier aSalesBook |

	cart := self createCart.
	cart add: 2 of: self itemInStore.
	
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithSalesBook: aSalesBook.
	self assert: 2 equals:  (cashier checkout: cart withCreditCard: self validCreditCard).
	self assert: 1 equals: aSalesBook size.
	self assert: 2 * self itemInStorePrice equals: aSalesBook first.! !

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:27:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:27:16'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:27:16'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:27:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:27:16'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:27:16'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:27:16'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ET 6/16/2021 18:27:26' prior: 51047694!
test05CanNotCheckoutWithExpiredCreditCard

	|cart cashier aSalesBook |
	
	cart := self createCart.
	cart add: self itemInStore.
	
	aSalesBook := OrderedCollection new.
	cashier := self newCashierWithSalesBook: aSalesBook.
	
	self should: [ (cashier checkout: cart withCreditCard: self expiredCreditCard)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCreditCardErrorDescription.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:27:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:27:26'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:27:26'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:27:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:27:26'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:27:26'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:27:26'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ET 6/16/2021 18:28:26' prior: 51047793!
test06CanNotCheckoutIfMerchantProcessorRaisesError

	|cart cashier aSalesBook messageError |

	cart := self createCart.
	cart add: self itemInStore.

	messageError := 'Something unexpected happened'.
	
	aSalesBook := OrderedCollection new.
	cashier := Cashier with: self defaultPriceList registerSalesOn: aSalesBook merchantProcessor: (self createMerchantProcessorThatRaisesError: messageError).
	
	
	self should: [ (cashier checkout: cart withCreditCard: self validCreditCard )]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [ :anError |
			self assert: anError messageText = messageError.
			self assert: aSalesBook isEmpty ]	.
		
		
		! !
!CashierTest methodsFor: 'tests' stamp: 'ET 6/16/2021 18:29:03'!
createMerchantProcessorThatRaisesError: messageError
	|aMerchantProcessor|
	aMerchantProcessor := MerchantProcessorSimulator new.
	aMerchantProcessor raiseErrorOnCharge: messageError.
	^aMerchantProcessor

		
		
		! !

!methodRemoval: CashierTest #newCashierWithsalesBook: stamp: 'ET 6/16/2021 18:29:12'!
newCashierWithsalesBook: aSalesBook
	
	^Cashier with: self defaultPriceList registerSalesOn: aSalesBook merchantProcessor: MerchantProcessorSimulator new.
		
		!
!CashierTest methodsFor: 'support' stamp: 'ET 6/16/2021 18:35:23' prior: 51047872!
newCashierWithSalesBook: aSalesBook
	
	^self newCashierWithPriceList: self defaultPriceList salesBook: aSalesBook.
		
		! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 18:35:24'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 18:35:24'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 18:35:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 18:35:24'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 18:35:24'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 18:35:24'!
PASSED!

----SNAPSHOT----(16 June 2021 18:43:31) CuisUniversity-4532.image priorSource: 22816683!

----STARTUP---- (16 June 2021 20:21:50) as C:\Users\ezequ\Desktop\windows64\CuisUniversity-4532.image!


!CreditCardTest methodsFor: 'tests' stamp: 'ET 6/16/2021 20:44:18'!
test04ExpiredCreditCardIsExpired

	self assertCreditCardInstanceCreationRaisesErrorWhenOwnedBy: '    ' withNumber: '1234567890123456'.! !
!CreditCardTest methodsFor: 'tests' stamp: 'ET 6/16/2021 20:45:02' prior: 51048272!
test04ExpiredCreditCardIsExpired

	CreditCard owner: 'Juan'  number: '1234567890123456' expiration: GregorianMonthOfYear current previous.! !
!CreditCardTest methodsFor: 'tests' stamp: 'ET 6/16/2021 20:45:47' prior: 51048279!
test04ExpiredCreditCardIsExpired

	| creditCard |
	creditCard := CreditCard owner: 'Juan'  number: '1234567890123456' expiration: GregorianMonthOfYear current previous.
	
	
	self assert: (creditCard isExpiredOn: Date today).
	! !

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:45:52'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 20:46:01'!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 20:47:33' prior: 51048300!
isExpiredOn: aDate 
	
	^(GregorianMonthOfYear year: aDate year month: aDate month) < gregorianMonthOfYear.! !

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:47:36'!
ERROR!

aDate year!

aDate year!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 20:49:04' prior: 51048305!
isExpiredOn: aDate 
	
	^(GregorianMonthOfYear yearNumber: aDate yearNumber monthNumber: aDate monthNumber) < gregorianMonthOfYear.! !

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:49:06'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 20:51:07' prior: 51048316!
isExpiredOn: aDate 
	
	^(GregorianMonthOfYear yearNumber: aDate yearNumber monthNumber: aDate monthIndex) < gregorianMonthOfYear.! !

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:51:09'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'ET 6/16/2021 20:51:20' prior: 51048287!
test04ExpiredCreditCardIsExpired

	| creditCard |
	creditCard := CreditCard owner: 'Juan'  number: '1234567890123456' expiration: GregorianMonthOfYear current next.
	
	
	self assert: (creditCard isExpiredOn: Date today).
	! !

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:51:22'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithIncorrectSizeNumber stamp: 'ET 6/16/2021 20:51:22'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithAlphaNumericNumber stamp: 'ET 6/16/2021 20:51:22'!
PASSED!

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 20:51:22'!
PASSED!

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:51:22'!
PASSED!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 20:51:37' prior: 51048327!
isExpiredOn: aDate 
	
	^true.! !

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:51:41'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithIncorrectSizeNumber stamp: 'ET 6/16/2021 20:51:41'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithAlphaNumericNumber stamp: 'ET 6/16/2021 20:51:41'!
PASSED!

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 20:51:41'!
PASSED!

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:51:41'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'ET 6/16/2021 20:52:35'!
test05NonExpiredCreditCardIsNotExpired

	| creditCard |
	creditCard := CreditCard owner: 'Juan'  number: '1234567890123456' expiration: GregorianMonthOfYear current previous.
	
	
	self deny: (creditCard isExpiredOn: Date today).
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'ET 6/16/2021 20:53:01' prior: 51048386!
test05NonExpiredCreditCardIsNotExpired

	| creditCard |
	creditCard := CreditCard owner: 'Juan'  number: '1234567890123456' expiration: GregorianMonthOfYear current next.
	
	
	self deny: (creditCard isExpiredOn: Date today).
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'ET 6/16/2021 20:53:07' prior: 51048337!
test04ExpiredCreditCardIsExpired

	| creditCard |
	creditCard := CreditCard owner: 'Juan'  number: '1234567890123456' expiration: GregorianMonthOfYear current previous.
	
	
	self assert: (creditCard isExpiredOn: Date today).
	! !

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:53:08'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithIncorrectSizeNumber stamp: 'ET 6/16/2021 20:53:08'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithAlphaNumericNumber stamp: 'ET 6/16/2021 20:53:08'!
PASSED!

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 20:53:08'!
PASSED!

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:53:08'!
PASSED!

!testRun: #CreditCardTest #test05NonExpiredCreditCardIsNotExpired stamp: 'ET 6/16/2021 20:53:08'!
FAILURE!

!testRun: #CreditCardTest #test05NonExpiredCreditCardIsNotExpired stamp: 'ET 6/16/2021 20:53:08'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 20:53:32' prior: 51048365!
isExpiredOn: aDate 
	
	^(GregorianMonthOfYear yearNumber: aDate yearNumber monthNumber: aDate monthIndex) > gregorianMonthOfYear.! !

!testRun: #CreditCardTest #test05NonExpiredCreditCardIsNotExpired stamp: 'ET 6/16/2021 20:53:43'!
PASSED!

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:55:34'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithIncorrectSizeNumber stamp: 'ET 6/16/2021 20:55:34'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithAlphaNumericNumber stamp: 'ET 6/16/2021 20:55:34'!
PASSED!

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 20:55:34'!
PASSED!

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:55:34'!
PASSED!

!testRun: #CreditCardTest #test05NonExpiredCreditCardIsNotExpired stamp: 'ET 6/16/2021 20:55:34'!
PASSED!
!Cashier methodsFor: 'assertions' stamp: 'ET 6/16/2021 20:56:27' prior: 51046684!
assertCreditCardIsNotExpired: aCreditCard
	
	(aCreditCard isExpiredOn: Date today) ifTrue: [self error: self class expiredCreditCardErrorDescription].! !

!methodRemoval: CreditCard #expirationDate stamp: 'ET 6/16/2021 20:56:34'!
expirationDate

	^gregorianMonthOfYear!

!testRun: #CreditCardTest #test05NonExpiredCreditCardIsNotExpired stamp: 'ET 6/16/2021 20:56:39'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithIncorrectSizeNumber stamp: 'ET 6/16/2021 20:56:39'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithAlphaNumericNumber stamp: 'ET 6/16/2021 20:56:39'!
PASSED!

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'ET 6/16/2021 20:56:39'!
PASSED!

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'ET 6/16/2021 20:56:39'!
PASSED!

!testRun: #CreditCardTest #test05NonExpiredCreditCardIsNotExpired stamp: 'ET 6/16/2021 20:56:39'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 20:56:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'ET 6/16/2021 20:56:43'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'ET 6/16/2021 20:56:43'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'ET 6/16/2021 20:56:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'ET 6/16/2021 20:56:43'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'ET 6/16/2021 20:56:43'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'ET 6/16/2021 20:56:43'!
PASSED!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ET 6/16/2021 20:57:10'!
Object subclass: #CreditCard
	instanceVariableNames: 'ownerString creditCardNumberString expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 20:57:10' prior: 51048441!
isExpiredOn: aDate 
	
	^(GregorianMonthOfYear yearNumber: aDate yearNumber monthNumber: aDate monthIndex) > expirationMonthOfYear.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'ET 6/16/2021 20:57:10' prior: 51044592!
initializeOwner: anOwnerString number: aCreditCardNumberString expiration: aGregorianMonthOfYear 

	ownerString := anOwnerString.
	creditCardNumberString := aCreditCardNumberString.
	expirationMonthOfYear := aGregorianMonthOfYear.! !



----STARTUP---- (17 June 2021 09:59:31) as /home/julian/facu/ingenieria1/ambientesCuis/TusLibros2/CuisUniversity-4532.image!


----End fileIn of /home/julian/facu/ingenieria1/ejsIS1/20-TusLibros/TusLibros.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithIncorrectSizeNumber stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithAlphaNumericNumber stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CreditCardTest #test03CanNotCreateCreditCardWithBlankOwner stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CreditCardTest #test04ExpiredCreditCardIsExpired stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

!testRun: #CreditCardTest #test05NonExpiredCreditCardIsNotExpired stamp: 'JA 6/17/2021 10:00:28'!
PASSED!

----End fileIn of /home/julian/facu/ingenieria1/ambientesCuis/TusLibros2/Packages/TerseGuide.pck.st----!

2021 / 06!

2021\06!

2021/06!

2021/6!

2021/6/01!

1/6/2021!

1/6/2021!

1/6/2021!

1/6/2021!

1 / 6 / 2021!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/17/2021 10:16:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/17/2021 10:16:07'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/17/2021 10:16:07'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/17/2021 10:16:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/17/2021 10:16:07'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'JA 6/17/2021 10:16:07'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'JA 6/17/2021 10:16:07'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/17/2021 10:21:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'JA 6/17/2021 10:21:25'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutCartWithNonPricedItem stamp: 'JA 6/17/2021 10:21:25'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithOneItemReturnsThePriceOfThatItem stamp: 'JA 6/17/2021 10:21:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutCartWithManyItemsReturnsTheSumOfThePricesOfThoseItems stamp: 'JA 6/17/2021 10:21:25'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithExpiredCreditCard stamp: 'JA 6/17/2021 10:21:25'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutIfMerchantProcessorRaisesError stamp: 'JA 6/17/2021 10:21:25'!
PASSED!

Dictionary with: self itemInStore -> self itemInStorePrice.!

Dictionary with: 'book' -> 123.50!

self includes: 'book'!

self includes: 123.50!

self includesKey: 'book'!

TestCase subclass: #XxxTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XxxTest category: 'TusLibros' stamp: 'JA 6/17/2021 20:39:20'!
TestCase subclass: #XxxTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosMarket category: 'TusLibros' stamp: 'JA 6/17/2021 20:53:36'!
Object subclass: #TusLibrosMarket
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientAuthenticatorSimulator category: 'TusLibros' stamp: 'JA 6/17/2021 20:53:48'!
Object subclass: #ClientAuthenticatorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XxxTest methodsFor: 'nil' stamp: 'JA 6/17/2021 20:53:20'!
test01

	| tusLibrosMarket |
	tusLibrosMarket := TusLibrosMarket withClientAuthenticator: ClientAuthenticatorSimulator new.
	
	
	self should: [
		tusLibrosMarket createCartFor: 123 authenticatedWith: 'passwd'
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :exception | self assert: 'Username or password invalid'  equals: exception messageText.
			self assert: tusLibrosMarket hasCarts.
		]
	
	
	
		! !

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 20:54:13'!
ERROR!
!TusLibrosMarket class methodsFor: 'instance creation' stamp: 'JA 6/17/2021 20:54:28'!
withClientAuthenticator: aClientAuthenticatorSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithClientAuthenticator: aClientAuthenticatorSimulator ! !
!TusLibrosMarket class methodsFor: 'instance creation' stamp: 'JA 6/17/2021 20:54:52' prior: 50863036!
withClientAuthenticator: aClientAuthenticator
	^self new initializeWithClientAuthenticator: aClientAuthenticator! !

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 20:54:53'!
ERROR!

!classDefinition: #TusLibrosMarket category: 'TusLibros' stamp: 'JA 6/17/2021 20:55:05'!
Object subclass: #TusLibrosMarket
	instanceVariableNames: 'clientAuthenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosMarket methodsFor: 'initialization' stamp: 'JA 6/17/2021 20:55:05'!
initializeWithClientAuthenticator: aClientAuthenticator 
	self shouldBeImplemented.
	clientAuthenticator := aClientAuthenticator.! !
!TusLibrosMarket methodsFor: 'initialization' stamp: 'JA 6/17/2021 20:55:14' prior: 50863063!
initializeWithClientAuthenticator: aClientAuthenticator 
	clientAuthenticator := aClientAuthenticator.! !

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 20:55:16'!
ERROR!
!TusLibrosMarket methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 20:55:26'!
createCartFor: aSmallInteger authenticatedWith: aString 
	self shouldBeImplemented.! !
!TusLibrosMarket methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 20:57:32' prior: 50863079!
createCartFor: aUserId authenticatedWith: aPassword
	self error: 'Username or password invalid'.! !

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 20:57:33'!
ERROR!
!TusLibrosMarket methodsFor: '*Cuis-University-Model' stamp: 'JA 6/17/2021 20:57:42'!
hasCarts
	self shouldBeImplemented.! !
!TusLibrosMarket methodsFor: '*Cuis-University-Model' stamp: 'JA 6/17/2021 20:58:10' prior: 50863093!
hasCarts
	^ false! !

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 20:58:11'!
FAILURE!
!XxxTest methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 20:58:25' prior: 50863018!
test01

	| tusLibrosMarket |
	tusLibrosMarket := TusLibrosMarket withClientAuthenticator: ClientAuthenticatorSimulator new.
	
	
	self should: [
		tusLibrosMarket createCartFor: 123 authenticatedWith: 'passwd'
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :exception | self assert: 'Username or password invalid'  equals: exception messageText.
			self deny: tusLibrosMarket hasCarts.
		]
	
	
	
		! !

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 20:58:25'!
PASSED!

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 20:58:25'!
PASSED!
!XxxTest methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:02:39'!
test02

	| tusLibrosMarket aCartId |
	tusLibrosMarket := TusLibrosMarket withClientAuthenticator: ClientAuthenticatorSimulator new.
	
	aCartId := tusLibrosMarket createCartFor: 123 authenticatedWith: 'passwd'.
			
	self assert: (tusLibrosMarket hasCartIdentified: aCartId).

	
	
	
		! !

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:02:45'!
ERROR!
!TusLibrosMarket methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:04:09' prior: 50863085!
createCartFor: aUserId authenticatedWith: aPassword
	clientAuthenticator athenticateUser: aUserId withPassword: aPassword. 
	self error: 'Username or password invalid'.! !

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:04:13'!
ERROR!
!ClientAuthenticatorSimulator methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:04:23'!
athenticateUser: aSmallInteger withPassword: aString 
	self shouldBeImplemented.! !

!classDefinition: #ClientAuthenticatorSimulator category: 'TusLibros' stamp: 'JA 6/17/2021 21:05:15'!
Object subclass: #ClientAuthenticatorSimulator
	instanceVariableNames: 'raiseAuthenticationError'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientAuthenticatorSimulator methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:05:12' prior: 50863150!
athenticateUser: aSmallInteger withPassword: aString 
	raiseAuthenticationError ifNotNil: [self error: 'Username or password invalid'].! !

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:05:22'!
ERROR!

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 21:07:10'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:07:10'!
ERROR!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:07:10'!
ERROR!

!classDefinition: #ClientAuthenticatorSimulator category: 'TusLibros' stamp: 'JA 6/17/2021 21:08:07'!
Object subclass: #ClientAuthenticatorSimulator
	instanceVariableNames: 'raiseAuthenticationError authenticationErrorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientAuthenticatorSimulator methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:08:05' prior: 50863165!
athenticateUser: aSmallInteger withPassword: aString 
	authenticationErrorMessage ifNotNil: [self error: authenticationErrorMessage].! !
!ClientAuthenticatorSimulator methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:08:47'!
raseAuthenticationErrorWithMessage: anErrorMessage
	authenticationErrorMessage := anErrorMessage .! !
!XxxTest methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:09:13' prior: 50863104!
test01

	| tusLibrosMarket |
	tusLibrosMarket := TusLibrosMarket withClientAuthenticator: ClientAuthenticatorSimulator new.
	
	
	self should: [
		tusLibrosMarket createCartFor: 123 authenticatedWith: 'passwd'
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :exception | | errorMessage |
	errorMessage _ 'Username or password invalid'.
	self assert: errorMessage  equals: exception messageText.
			self deny: tusLibrosMarket hasCarts.
		]
	
	
	
		! !
!XxxTest methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:10:12' prior: 50863206!
test01

	| tusLibrosMarket errorMessage |
	errorMessage _ 'Username or password invalid'.
	tusLibrosMarket := TusLibrosMarket withClientAuthenticator: ClientAuthenticatorSimulator new.
	
	
	self should: [
		tusLibrosMarket createCartFor: 123 authenticatedWith: 'passwd'
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :exception | 
	
	self assert: errorMessage  equals: exception messageText.
			self deny: tusLibrosMarket hasCarts.
		]
	
	
	
		! !
!XxxTest methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:10:29' prior: 50863224!
test01

	| tusLibrosMarket errorMessage clientAuthenticatorSimulator |
	errorMessage _ 'Username or password invalid'.
	clientAuthenticatorSimulator _ ClientAuthenticatorSimulator new.
	tusLibrosMarket := TusLibrosMarket withClientAuthenticator: clientAuthenticatorSimulator.
	
	
	self should: [
		tusLibrosMarket createCartFor: 123 authenticatedWith: 'passwd'
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :exception | 
	
	self assert: errorMessage  equals: exception messageText.
			self deny: tusLibrosMarket hasCarts.
		]
	
	
	
		! !
!XxxTest methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:11:06' prior: 50863242!
test01

	| tusLibrosMarket errorMessage clientAuthenticatorSimulator |
	errorMessage _ 'Username or password invalid'.
	clientAuthenticatorSimulator _ ClientAuthenticatorSimulator new.
	
	tusLibrosMarket := TusLibrosMarket withClientAuthenticator: clientAuthenticatorSimulator.
	
	
	self should: [
		tusLibrosMarket createCartFor: 123 authenticatedWith: 'passwd'
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :exception | 
	
	self assert: errorMessage  equals: exception messageText.
			self deny: tusLibrosMarket hasCarts.
		]
	
	
	
		! !
!ClientAuthenticatorSimulator methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:11:34'!
raiseAuthenticationErrorWithMessage: anErrorMessage
	authenticationErrorMessage := anErrorMessage .! !

!methodRemoval: ClientAuthenticatorSimulator #raseAuthenticationErrorWithMessage: stamp: 'JA 6/17/2021 21:11:34'!
raseAuthenticationErrorWithMessage: anErrorMessage
	authenticationErrorMessage := anErrorMessage .!
!XxxTest methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:12:00' prior: 50863263!
test01

	| tusLibrosMarket errorMessage clientAuthenticatorSimulator |
	errorMessage _ 'Username or password invalid'.
	clientAuthenticatorSimulator _ ClientAuthenticatorSimulator new.
	clientAuthenticatorSimulator raiseAuthenticationErrorWithMessage: errorMessage .
	tusLibrosMarket := TusLibrosMarket withClientAuthenticator: clientAuthenticatorSimulator.
	
	
	self should: [
		tusLibrosMarket createCartFor: 123 authenticatedWith: 'passwd'
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :exception | 
	
	self assert: errorMessage  equals: exception messageText.
			self deny: tusLibrosMarket hasCarts.
		]
	
	
	
		! !

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 21:12:01'!
PASSED!

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 21:12:01'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:12:01'!
ERROR!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:12:01'!
ERROR!
!XxxTest methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:14:25' prior: 50863124!
test02

	| tusLibrosMarket aCartId |
	tusLibrosMarket := TusLibrosMarket withClientAuthenticator: ClientAuthenticatorSimulator new.
	
	aCartId := tusLibrosMarket createCartFor: 123 authenticatedWith: 'passwd'.

	self assert: tusLibrosMarket hasCarts.
	self assert: (tusLibrosMarket hasCartIdentified: aCartId).

	
	
	
		! !
!TusLibrosMarket methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:14:43' prior: 50863139!
createCartFor: aUserId authenticatedWith: aPassword
	clientAuthenticator athenticateUser: aUserId withPassword: aPassword. 
	! !

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:14:47'!
FAILURE!

!classDefinition: #TusLibrosMarket category: 'TusLibros' stamp: 'JA 6/17/2021 21:18:06'!
Object subclass: #TusLibrosMarket
	instanceVariableNames: 'clientAuthenticator carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosMarket category: 'TusLibros' stamp: 'JA 6/17/2021 21:18:09'!
Object subclass: #TusLibrosMarket
	instanceVariableNames: 'clientAuthenticator carts itemCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosMarket methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:18:01' prior: 50863343!
createCartFor: aUserId authenticatedWith: aPassword
	clientAuthenticator athenticateUser: aUserId withPassword: aPassword. 
	
	carts add: (Cart acceptingItemsOf: itemCatalog)
	
	
	! !

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:18:13'!
ERROR!

!classDefinition: #TusLibrosMarket category: 'TusLibros' stamp: 'JA 6/17/2021 21:21:07'!
Object subclass: #TusLibrosMarket
	instanceVariableNames: 'clientAuthenticator carts itemCatalog catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosMarket methodsFor: 'initialization' stamp: 'JA 6/17/2021 21:20:42'!
initializeWithClientAuthenticator: aClientAuthenticator catalog: aCatalog
	clientAuthenticator := aClientAuthenticator.
	carts := OrderedCollection new.
	catalog := aCatalog! !
!TusLibrosMarket class methodsFor: 'instance creation' stamp: 'JA 6/17/2021 21:22:56'!
withClientAuthenticator: aClientAuthenticator catalog: catalog 
	^self new initializeWithClientAuthenticator: aClientAuthenticator! !
!XxxTest methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:22:56' prior: 50863329!
test02

	| tusLibrosMarket aCartId |
	tusLibrosMarket := TusLibrosMarket withClientAuthenticator: ClientAuthenticatorSimulator new catalog: OrderedCollection new.
	
	aCartId := tusLibrosMarket createCartFor: 123 authenticatedWith: 'passwd'.

	self assert: tusLibrosMarket hasCarts.
	self assert: (tusLibrosMarket hasCartIdentified: aCartId).

	
	
	
		! !
!XxxTest methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:22:56' prior: 50863297!
test01

	| tusLibrosMarket errorMessage clientAuthenticatorSimulator |
	errorMessage _ 'Username or password invalid'.
	clientAuthenticatorSimulator _ ClientAuthenticatorSimulator new.
	clientAuthenticatorSimulator raiseAuthenticationErrorWithMessage: errorMessage .
	tusLibrosMarket := TusLibrosMarket withClientAuthenticator: clientAuthenticatorSimulator catalog: OrderedCollection new.
	
	
	self should: [
		tusLibrosMarket createCartFor: 123 authenticatedWith: 'passwd'
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :exception | 
	
	self assert: errorMessage  equals: exception messageText.
			self deny: tusLibrosMarket hasCarts.
		]
	
	
	
		! !

!methodRemoval: TusLibrosMarket class #withClientAuthenticator: stamp: 'JA 6/17/2021 21:22:56'!
withClientAuthenticator: aClientAuthenticator
	^self new initializeWithClientAuthenticator: aClientAuthenticator!
!TusLibrosMarket class methodsFor: 'instance creation' stamp: 'JA 6/17/2021 21:23:23' prior: 50863397!
withClientAuthenticator: aClientAuthenticator catalog: aCatalog 
	^self new initializeWithClientAuthenticator: aClientAuthenticator catalog: aCatalog! !

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:23:40'!
FAILURE!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:24:24'!
FAILURE!
!TusLibrosMarket methodsFor: '*Cuis-University-Model' stamp: 'JA 6/17/2021 21:25:00' prior: 50863098!
hasCarts
	^ carts isEmpty not.! !

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:25:05'!
ERROR!
!TusLibrosMarket methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:25:15'!
hasCartIdentified: aTusLibrosMarket 
	self shouldBeImplemented.! !
!TusLibrosMarket methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:25:34' prior: 50863469!
hasCartIdentified: aTusLibrosMarket 
	^ true! !

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:25:35'!
PASSED!

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 21:25:35'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:25:35'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:25:40'!
PASSED!

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 21:25:40'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:25:40'!
PASSED!
!XxxTest methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:27:23'!
test03

	| tusLibrosMarket |
	tusLibrosMarket := TusLibrosMarket withClientAuthenticator: ClientAuthenticatorSimulator new catalog: OrderedCollection new.
	
	
	self deny: tusLibrosMarket hasCarts.
	self deny: (tusLibrosMarket hasCartIdentified: 1).

	
	
	
		! !

!testRun: #XxxTest #test03 stamp: 'JA 6/17/2021 21:27:30'!
FAILURE!
!TusLibrosMarket methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:31:00' prior: 50863475!
hasCartIdentified: aTusLibrosMarket 
 	carts at: aTusLibrosMarket ifAbsent: [^ false].
	^true! !

!testRun: #XxxTest #test03 stamp: 'JA 6/17/2021 21:31:02'!
PASSED!

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 21:31:02'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:31:02'!
ERROR!

!testRun: #XxxTest #test03 stamp: 'JA 6/17/2021 21:31:02'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:31:02'!
ERROR!

!testRun: #XxxTest #test03 stamp: 'JA 6/17/2021 21:31:58'!
PASSED!

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 21:31:58'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:31:58'!
ERROR!

!testRun: #XxxTest #test03 stamp: 'JA 6/17/2021 21:31:58'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:31:58'!
ERROR!

!testRun: #XxxTest #test03 stamp: 'JA 6/17/2021 21:32:31'!
PASSED!

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 21:32:31'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:32:31'!
ERROR!

!testRun: #XxxTest #test03 stamp: 'JA 6/17/2021 21:32:31'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:32:31'!
ERROR!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:32:56'!
ERROR!

!testRun: #XxxTest #test03 stamp: 'JA 6/17/2021 21:35:51'!
PASSED!

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 21:35:51'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:35:51'!
ERROR!

!testRun: #XxxTest #test03 stamp: 'JA 6/17/2021 21:35:51'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:35:51'!
ERROR!
!TusLibrosMarket methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:38:37' prior: 50863506!
hasCartIdentified: aTusLibrosMarket 
 	carts at: aTusLibrosMarket ifAbsent: [^ false].
	^true! !
!TusLibrosMarket methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:38:54' prior: 50863557!
hasCartIdentified: aCartId 
 	carts at: aCartId ifAbsent: [^ false].
	^true! !

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:38:55'!
ERROR!
!TusLibrosMarket methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:39:48' prior: 50863564!
hasCartIdentified: aCartId 
 	carts at: aCartId ifAbsent: [^ false].
	^true.! !

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:39:50'!
ERROR!
!TusLibrosMarket methodsFor: 'as yet unclassified' stamp: 'JA 6/17/2021 21:44:00' prior: 50863369!
createCartFor: aUserId authenticatedWith: aPassword
	clientAuthenticator athenticateUser: aUserId withPassword: aPassword. 
	
	carts add: (Cart acceptingItemsOf: itemCatalog).
	^ 1
	
	! !

!testRun: #XxxTest #test01 stamp: 'JA 6/17/2021 21:44:05'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/17/2021 21:44:05'!
PASSED!

!testRun: #XxxTest #test03 stamp: 'JA 6/17/2021 21:44:05'!
PASSED!

!testRun: #XxxTest #test01 stamp: 'JA 6/18/2021 09:22:34'!
PASSED!

!testRun: #XxxTest #test01 stamp: 'JA 6/18/2021 09:22:34'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/18/2021 09:22:34'!
PASSED!

!testRun: #XxxTest #test03 stamp: 'JA 6/18/2021 09:22:34'!
PASSED!

!testRun: #XxxTest #test01 stamp: 'JA 6/18/2021 09:23:28'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/18/2021 09:23:28'!
PASSED!

!testRun: #XxxTest #test03 stamp: 'JA 6/18/2021 09:23:28'!
PASSED!

!methodRemoval: TusLibrosMarket #initializeWithClientAuthenticator: stamp: 'JA 6/18/2021 09:23:39'!
initializeWithClientAuthenticator: aClientAuthenticator 
	clientAuthenticator := aClientAuthenticator.!

!testRun: #XxxTest #test01 stamp: 'JA 6/18/2021 09:23:44'!
PASSED!

!testRun: #XxxTest #test02 stamp: 'JA 6/18/2021 09:23:44'!
PASSED!

!testRun: #XxxTest #test03 stamp: 'JA 6/18/2021 09:23:44'!
PASSED!

----QUIT----(18 June 2021 09:25:55) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (18 June 2021 09:27:08) as /home/julian/facu/ingenieria1/ambientesCuis/TusLibros2/CuisUniversity-4532.image!


----QUIT----(18 June 2021 09:27:16) CuisUniversity-4532.image priorSource: 17023100!